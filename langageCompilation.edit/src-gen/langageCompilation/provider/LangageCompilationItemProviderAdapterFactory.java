/**
 */
package langageCompilation.provider;

import java.util.ArrayList;
import java.util.Collection;

import langageCompilation.util.LangageCompilationAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class LangageCompilationItemProviderAdapterFactory extends LangageCompilationAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LangageCompilationItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.Program} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProgramItemProvider programItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.Program}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProgramAdapter() {
		if (programItemProvider == null) {
			programItemProvider = new ProgramItemProvider(this);
		}

		return programItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.WhileLoop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhileLoopItemProvider whileLoopItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.WhileLoop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhileLoopAdapter() {
		if (whileLoopItemProvider == null) {
			whileLoopItemProvider = new WhileLoopItemProvider(this);
		}

		return whileLoopItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.VariableRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableRefItemProvider variableRefItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.VariableRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableRefAdapter() {
		if (variableRefItemProvider == null) {
			variableRefItemProvider = new VariableRefItemProvider(this);
		}

		return variableRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.Substraction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubstractionItemProvider substractionItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.Substraction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubstractionAdapter() {
		if (substractionItemProvider == null) {
			substractionItemProvider = new SubstractionItemProvider(this);
		}

		return substractionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.GT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GTItemProvider gtItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.GT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGTAdapter() {
		if (gtItemProvider == null) {
			gtItemProvider = new GTItemProvider(this);
		}

		return gtItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.Assignement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssignementItemProvider assignementItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.Assignement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssignementAdapter() {
		if (assignementItemProvider == null) {
			assignementItemProvider = new AssignementItemProvider(this);
		}

		return assignementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.UnInteger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnIntegerItemProvider unIntegerItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.UnInteger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnIntegerAdapter() {
		if (unIntegerItemProvider == null) {
			unIntegerItemProvider = new UnIntegerItemProvider(this);
		}

		return unIntegerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.UnString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnStringItemProvider unStringItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.UnString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnStringAdapter() {
		if (unStringItemProvider == null) {
			unStringItemProvider = new UnStringItemProvider(this);
		}

		return unStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.LT} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LTItemProvider ltItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.LT}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLTAdapter() {
		if (ltItemProvider == null) {
			ltItemProvider = new LTItemProvider(this);
		}

		return ltItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.Equal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EqualItemProvider equalItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.Equal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEqualAdapter() {
		if (equalItemProvider == null) {
			equalItemProvider = new EqualItemProvider(this);
		}

		return equalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.Addition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdditionItemProvider additionItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.Addition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdditionAdapter() {
		if (additionItemProvider == null) {
			additionItemProvider = new AdditionItemProvider(this);
		}

		return additionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.Division} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DivisionItemProvider divisionItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.Division}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDivisionAdapter() {
		if (divisionItemProvider == null) {
			divisionItemProvider = new DivisionItemProvider(this);
		}

		return divisionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.Multiplication} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiplicationItemProvider multiplicationItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.Multiplication}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiplicationAdapter() {
		if (multiplicationItemProvider == null) {
			multiplicationItemProvider = new MultiplicationItemProvider(this);
		}

		return multiplicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.LTorEqual} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LTorEqualItemProvider lTorEqualItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.LTorEqual}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLTorEqualAdapter() {
		if (lTorEqualItemProvider == null) {
			lTorEqualItemProvider = new LTorEqualItemProvider(this);
		}

		return lTorEqualItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.GTorEqual} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GTorEqualItemProvider gTorEqualItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.GTorEqual}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGTorEqualAdapter() {
		if (gTorEqualItemProvider == null) {
			gTorEqualItemProvider = new GTorEqualItemProvider(this);
		}

		return gTorEqualItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.UnBoolean} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnBooleanItemProvider unBooleanItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.UnBoolean}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnBooleanAdapter() {
		if (unBooleanItemProvider == null) {
			unBooleanItemProvider = new UnBooleanItemProvider(this);
		}

		return unBooleanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.Different} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DifferentItemProvider differentItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.Different}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDifferentAdapter() {
		if (differentItemProvider == null) {
			differentItemProvider = new DifferentItemProvider(this);
		}

		return differentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.ConditionEtat} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionEtatItemProvider conditionEtatItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.ConditionEtat}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionEtatAdapter() {
		if (conditionEtatItemProvider == null) {
			conditionEtatItemProvider = new ConditionEtatItemProvider(this);
		}

		return conditionEtatItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.MethodePrint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodePrintItemProvider methodePrintItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.MethodePrint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMethodePrintAdapter() {
		if (methodePrintItemProvider == null) {
			methodePrintItemProvider = new MethodePrintItemProvider(this);
		}

		return methodePrintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.UnDouble} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnDoubleItemProvider unDoubleItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.UnDouble}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnDoubleAdapter() {
		if (unDoubleItemProvider == null) {
			unDoubleItemProvider = new UnDoubleItemProvider(this);
		}

		return unDoubleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.TheBoolean} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TheBooleanItemProvider theBooleanItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.TheBoolean}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTheBooleanAdapter() {
		if (theBooleanItemProvider == null) {
			theBooleanItemProvider = new TheBooleanItemProvider(this);
		}

		return theBooleanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.TheDouble} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TheDoubleItemProvider theDoubleItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.TheDouble}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTheDoubleAdapter() {
		if (theDoubleItemProvider == null) {
			theDoubleItemProvider = new TheDoubleItemProvider(this);
		}

		return theDoubleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.TheInt} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TheIntItemProvider theIntItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.TheInt}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTheIntAdapter() {
		if (theIntItemProvider == null) {
			theIntItemProvider = new TheIntItemProvider(this);
		}

		return theIntItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.TheString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TheStringItemProvider theStringItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.TheString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTheStringAdapter() {
		if (theStringItemProvider == null) {
			theStringItemProvider = new TheStringItemProvider(this);
		}

		return theStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.PlusEqual} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlusEqualItemProvider plusEqualItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.PlusEqual}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlusEqualAdapter() {
		if (plusEqualItemProvider == null) {
			plusEqualItemProvider = new PlusEqualItemProvider(this);
		}

		return plusEqualItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.MinusEqual} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MinusEqualItemProvider minusEqualItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.MinusEqual}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMinusEqualAdapter() {
		if (minusEqualItemProvider == null) {
			minusEqualItemProvider = new MinusEqualItemProvider(this);
		}

		return minusEqualItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.Car} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CarItemProvider carItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.Car}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCarAdapter() {
		if (carItemProvider == null) {
			carItemProvider = new CarItemProvider(this);
		}

		return carItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.ColorSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColorSensorItemProvider colorSensorItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.ColorSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColorSensorAdapter() {
		if (colorSensorItemProvider == null) {
			colorSensorItemProvider = new ColorSensorItemProvider(this);
		}

		return colorSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.LaserSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LaserSensorItemProvider laserSensorItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.LaserSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLaserSensorAdapter() {
		if (laserSensorItemProvider == null) {
			laserSensorItemProvider = new LaserSensorItemProvider(this);
		}

		return laserSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.WheelEngine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WheelEngineItemProvider wheelEngineItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.WheelEngine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWheelEngineAdapter() {
		if (wheelEngineItemProvider == null) {
			wheelEngineItemProvider = new WheelEngineItemProvider(this);
		}

		return wheelEngineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.EngineRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EngineRefItemProvider engineRefItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.EngineRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEngineRefAdapter() {
		if (engineRefItemProvider == null) {
			engineRefItemProvider = new EngineRefItemProvider(this);
		}

		return engineRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.SensorRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorRefItemProvider sensorRefItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.SensorRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensorRefAdapter() {
		if (sensorRefItemProvider == null) {
			sensorRefItemProvider = new SensorRefItemProvider(this);
		}

		return sensorRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.NewEClass43} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NewEClass43ItemProvider newEClass43ItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.NewEClass43}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNewEClass43Adapter() {
		if (newEClass43ItemProvider == null) {
			newEClass43ItemProvider = new NewEClass43ItemProvider(this);
		}

		return newEClass43ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.VitesseOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VitesseOperationItemProvider vitesseOperationItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.VitesseOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVitesseOperationAdapter() {
		if (vitesseOperationItemProvider == null) {
			vitesseOperationItemProvider = new VitesseOperationItemProvider(this);
		}

		return vitesseOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.ColorOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColorOperationItemProvider colorOperationItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.ColorOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColorOperationAdapter() {
		if (colorOperationItemProvider == null) {
			colorOperationItemProvider = new ColorOperationItemProvider(this);
		}

		return colorOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link langageCompilation.RangeOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RangeOperationItemProvider rangeOperationItemProvider;

	/**
	 * This creates an adapter for a {@link langageCompilation.RangeOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRangeOperationAdapter() {
		if (rangeOperationItemProvider == null) {
			rangeOperationItemProvider = new RangeOperationItemProvider(this);
		}

		return rangeOperationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (programItemProvider != null)
			programItemProvider.dispose();
		if (whileLoopItemProvider != null)
			whileLoopItemProvider.dispose();
		if (variableRefItemProvider != null)
			variableRefItemProvider.dispose();
		if (substractionItemProvider != null)
			substractionItemProvider.dispose();
		if (gtItemProvider != null)
			gtItemProvider.dispose();
		if (assignementItemProvider != null)
			assignementItemProvider.dispose();
		if (unIntegerItemProvider != null)
			unIntegerItemProvider.dispose();
		if (unStringItemProvider != null)
			unStringItemProvider.dispose();
		if (ltItemProvider != null)
			ltItemProvider.dispose();
		if (equalItemProvider != null)
			equalItemProvider.dispose();
		if (additionItemProvider != null)
			additionItemProvider.dispose();
		if (divisionItemProvider != null)
			divisionItemProvider.dispose();
		if (multiplicationItemProvider != null)
			multiplicationItemProvider.dispose();
		if (lTorEqualItemProvider != null)
			lTorEqualItemProvider.dispose();
		if (gTorEqualItemProvider != null)
			gTorEqualItemProvider.dispose();
		if (unBooleanItemProvider != null)
			unBooleanItemProvider.dispose();
		if (differentItemProvider != null)
			differentItemProvider.dispose();
		if (conditionEtatItemProvider != null)
			conditionEtatItemProvider.dispose();
		if (methodePrintItemProvider != null)
			methodePrintItemProvider.dispose();
		if (unDoubleItemProvider != null)
			unDoubleItemProvider.dispose();
		if (theBooleanItemProvider != null)
			theBooleanItemProvider.dispose();
		if (theDoubleItemProvider != null)
			theDoubleItemProvider.dispose();
		if (theIntItemProvider != null)
			theIntItemProvider.dispose();
		if (theStringItemProvider != null)
			theStringItemProvider.dispose();
		if (plusEqualItemProvider != null)
			plusEqualItemProvider.dispose();
		if (minusEqualItemProvider != null)
			minusEqualItemProvider.dispose();
		if (carItemProvider != null)
			carItemProvider.dispose();
		if (colorSensorItemProvider != null)
			colorSensorItemProvider.dispose();
		if (laserSensorItemProvider != null)
			laserSensorItemProvider.dispose();
		if (wheelEngineItemProvider != null)
			wheelEngineItemProvider.dispose();
		if (engineRefItemProvider != null)
			engineRefItemProvider.dispose();
		if (sensorRefItemProvider != null)
			sensorRefItemProvider.dispose();
		if (newEClass43ItemProvider != null)
			newEClass43ItemProvider.dispose();
		if (vitesseOperationItemProvider != null)
			vitesseOperationItemProvider.dispose();
		if (colorOperationItemProvider != null)
			colorOperationItemProvider.dispose();
		if (rangeOperationItemProvider != null)
			rangeOperationItemProvider.dispose();
	}

}
