// automatically generated by Xtext
grammar langageCompilation.concrete.syntax.LegoLang with org.eclipse.xtext.common.Terminals

import "http://www.example.org/langageCompilation" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Program returns Program:
	{Program}
	'Program'
	name=EString
	'{'
		(statement+=Statement)*
	'}';

Statement returns Statement:
	WhileLoop | VariableRef | Variable | Expression | ConditionEtat | MethodePrint ;

Expression returns Expression:
	VariableRef | Substraction | Comparaison | Assignement | Division | Multiplication | Addition;

Variable returns Variable:
	unInteger | unString | unBoolean;

Comparaison returns Comparaison:
	  GT | Equal | LT | Different | GTorEqual | LTorEqual ;

ConditionEtat returns ConditionEtat:
	'if'
		Condition=Comparaison '{'
			(then+=Statement )*
		'}'
		('else{'else+=Statement'}' )?
	;
EString returns ecore::EString:
	STRING | ID;


WhileLoop returns WhileLoop:
	'while'
		LoopCondition=Comparaison
	'{'
		(statement+=Statement )*
	'}';
	
MethodePrint returns MethodePrint:
	{MethodePrint}
	'print('
	(variableref+=VariableRef)?
	(expression+=Expression)?
	');';
VariableRef returns VariableRef:
	variable=[Variable|EString]
	;

Substraction returns Substraction:
	   '(' left=Expression '-'
		right=Expression ')'
	;
	
Addition returns Addition:
	   '(' left=Expression '+'
		right=Expression ')'
	;
	
Multiplication returns Multiplication:
	   '(' left=Expression '*'
		right=Expression ')'
	;
	
Division returns Division:
	   '(' left=Expression '/'
		right=Expression ')'
	;

GT returns GT:
	'(' left=Expression '>'
	right=Expression ')';

LT returns LT:
	'(' left=Expression '<'
	right=Expression ')';
	
Equal returns Equal:
	'(' left=Expression '=='
	right=Expression ')';
	
Different returns Different:
	'(' left=Expression '!='
	right=Expression ')';


LTorEqual returns LTorEqual:
	'(' left=Expression '<='
	right=Expression ')';

GTorEqual returns GTorEqual:
	'(' left=Expression '>='
	right=Expression ')';
	
Assignement returns Assignement:
	'('left=Expression
	'=' right=Expression ');' 
	;


EBoolean returns ecore::EBoolean:
	'true' | 'false';

unInteger returns unInteger:
	{unInteger}
	(isConst?='const')?
	'int'
	name=EString
	('=' initialeValue=EInt)? ";";

unBoolean returns unBoolean:
	{unBoolean}
	(isConst?='const')?
	'bool'
	name=EString
	('=' initialeValue=EBoolean)? ";"; 
	
unString returns unString:
	{unString}
	(isConst?='const')?
	'string'
	name=EString
	('=' initialeValue=EString)? ";";


EInt returns ecore::EInt:
	'-'? INT;
