/**
 */
package langageCompilation.impl;

import java.util.Collection;

import langageCompilation.LangageCompilationPackage;
import langageCompilation.MethodePrint;
import langageCompilation.VariableRef;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Methode Print</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link langageCompilation.impl.MethodePrintImpl#getVariableref <em>Variableref</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MethodePrintImpl extends StatementImpl implements MethodePrint {
	/**
	 * The cached value of the '{@link #getVariableref() <em>Variableref</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getVariableref()
	 * @generated
	 * @ordered
	 */
	protected EList<VariableRef> variableref;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodePrintImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return LangageCompilationPackage.Literals.METHODE_PRINT;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<VariableRef> getVariableref() {
		if (variableref == null) {
			variableref = new EObjectContainmentEList<VariableRef>(VariableRef.class, this,
					LangageCompilationPackage.METHODE_PRINT__VARIABLEREF);
		}
		return variableref;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
		case LangageCompilationPackage.METHODE_PRINT__VARIABLEREF:
			return ((InternalEList<?>) getVariableref()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
		case LangageCompilationPackage.METHODE_PRINT__VARIABLEREF:
			return getVariableref();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
		case LangageCompilationPackage.METHODE_PRINT__VARIABLEREF:
			getVariableref().clear();
			getVariableref().addAll((Collection<? extends VariableRef>) newValue);
			return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
		case LangageCompilationPackage.METHODE_PRINT__VARIABLEREF:
			getVariableref().clear();
			return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
		case LangageCompilationPackage.METHODE_PRINT__VARIABLEREF:
			return variableref != null && !variableref.isEmpty();
		}
		return super.eIsSet(featureID);
	}

} //MethodePrintImpl
