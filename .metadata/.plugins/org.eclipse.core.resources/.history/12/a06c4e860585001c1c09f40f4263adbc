/**
 */
package langageCompilation.langageCompilation.impl;

import langageCompilation.langageCompilation.Assignement;
import langageCompilation.langageCompilation.Comparaison;
import langageCompilation.langageCompilation.GT;
import langageCompilation.langageCompilation.LangageCompilationFactory;
import langageCompilation.langageCompilation.LangageCompilationPackage;
import langageCompilation.langageCompilation.Program;
import langageCompilation.langageCompilation.Substarction;
import langageCompilation.langageCompilation.Variable;
import langageCompilation.langageCompilation.VariableDeclaration;
import langageCompilation.langageCompilation.VariableRef;
import langageCompilation.langageCompilation.WhileLoop;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class LangageCompilationFactoryImpl extends EFactoryImpl implements LangageCompilationFactory {
	/**
	 * Creates the default factory implementation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static LangageCompilationFactory init() {
		try {
			LangageCompilationFactory theLangageCompilationFactory = (LangageCompilationFactory) EPackage.Registry.INSTANCE
					.getEFactory(LangageCompilationPackage.eNS_URI);
			if (theLangageCompilationFactory != null) {
				return theLangageCompilationFactory;
			}
		} catch (Exception exception) {
			EcorePlugin.INSTANCE.log(exception);
		}
		return new LangageCompilationFactoryImpl();
	}

	/**
	 * Creates an instance of the factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LangageCompilationFactoryImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EObject create(EClass eClass) {
		switch (eClass.getClassifierID()) {
		case LangageCompilationPackage.PROGRAM:
			return createProgram();
		case LangageCompilationPackage.VARIABLE:
			return createVariable();
		case LangageCompilationPackage.WHILE_LOOP:
			return createWhileLoop();
		case LangageCompilationPackage.TYPE:
			return (EObject) createType();
		case LangageCompilationPackage.VARIABLE_REF:
			return createVariableRef();
		case LangageCompilationPackage.SUBSTARCTION:
			return createSubstarction();
		case LangageCompilationPackage.COMPARAISON:
			return createComparaison();
		case LangageCompilationPackage.GT:
			return createGT();
		case LangageCompilationPackage.ASSIGNEMENT:
			return createAssignement();
		case LangageCompilationPackage.INTEGER:
			return createInteger();
		case LangageCompilationPackage.STRING:
			return createString();
		case LangageCompilationPackage.VARIABLE_DECLARATION:
			return createVariableDeclaration();
		default:
			throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Program createProgram() {
		ProgramImpl program = new ProgramImpl();
		return program;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Variable createVariable() {
		VariableImpl variable = new VariableImpl();
		return variable;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public WhileLoop createWhileLoop() {
		WhileLoopImpl whileLoop = new WhileLoopImpl();
		return whileLoop;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EClass createType() {
		TypeImpl type = new TypeImpl();
		return type;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public VariableRef createVariableRef() {
		VariableRefImpl variableRef = new VariableRefImpl();
		return variableRef;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Substarction createSubstarction() {
		SubstarctionImpl substarction = new SubstarctionImpl();
		return substarction;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Comparaison createComparaison() {
		ComparaisonImpl comparaison = new ComparaisonImpl();
		return comparaison;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public GT createGT() {
		GTImpl gt = new GTImpl();
		return gt;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Assignement createAssignement() {
		AssignementImpl assignement = new AssignementImpl();
		return assignement;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public langageCompilation.langageCompilation.Integer createInteger() {
		IntegerImpl integer = new IntegerImpl();
		return integer;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public langageCompilation.langageCompilation.String createString() {
		StringImpl string = new StringImpl();
		return string;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public VariableDeclaration createVariableDeclaration() {
		VariableDeclarationImpl variableDeclaration = new VariableDeclarationImpl();
		return variableDeclaration;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LangageCompilationPackage getLangageCompilationPackage() {
		return (LangageCompilationPackage) getEPackage();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @deprecated
	 * @generated
	 */
	@Deprecated
	public static LangageCompilationPackage getPackage() {
		return LangageCompilationPackage.eINSTANCE;
	}

} //LangageCompilationFactoryImpl
