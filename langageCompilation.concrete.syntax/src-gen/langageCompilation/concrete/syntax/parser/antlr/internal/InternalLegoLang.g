/*
 * generated by Xtext 2.25.0
 */
grammar InternalLegoLang;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package langageCompilation.concrete.syntax.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package langageCompilation.concrete.syntax.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import langageCompilation.concrete.syntax.services.LegoLangGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private LegoLangGrammarAccess grammarAccess;

    public InternalLegoLangParser(TokenStream input, LegoLangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected LegoLangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getProgramAccess().getProgramAction_0(),
					$current);
			}
		)
		otherlv_1='Program'
		{
			newLeafNode(otherlv_1, grammarAccess.getProgramAccess().getProgramKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"langageCompilation.concrete.syntax.LegoLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getProgramAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getStatementStatementParserRuleCall_4_0());
				}
				lv_statement_4_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"statement",
						lv_statement_4_0,
						"langageCompilation.concrete.syntax.LegoLang.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getProgramAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getWhileLoopParserRuleCall_0());
		}
		this_WhileLoop_0=ruleWhileLoop
		{
			$current = $this_WhileLoop_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getVariableParserRuleCall_1());
		}
		this_Variable_1=ruleVariable
		{
			$current = $this_Variable_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getExpressionParserRuleCall_2());
		}
		this_Expression_2=ruleExpression
		{
			$current = $this_Expression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getConditionEtatParserRuleCall_3());
		}
		this_ConditionEtat_3=ruleConditionEtat
		{
			$current = $this_ConditionEtat_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getMethodePrintParserRuleCall_4());
		}
		this_MethodePrint_4=ruleMethodePrint
		{
			$current = $this_MethodePrint_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getCarParserRuleCall_5());
		}
		this_Car_5=ruleCar
		{
			$current = $this_Car_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSensorParserRuleCall_6());
		}
		this_Sensor_6=ruleSensor
		{
			$current = $this_Sensor_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getEngineParserRuleCall_7());
		}
		this_Engine_7=ruleEngine
		{
			$current = $this_Engine_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getVariableRefParserRuleCall_0());
		}
		this_VariableRef_0=ruleVariableRef
		{
			$current = $this_VariableRef_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getBinaryOperationParserRuleCall_1());
		}
		this_BinaryOperation_1=ruleBinaryOperation
		{
			$current = $this_BinaryOperation_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getTheStringParserRuleCall_2());
		}
		this_TheString_2=ruleTheString
		{
			$current = $this_TheString_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getTheDoubleParserRuleCall_3());
		}
		this_TheDouble_3=ruleTheDouble
		{
			$current = $this_TheDouble_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getTheIntParserRuleCall_4());
		}
		this_TheInt_4=ruleTheInt
		{
			$current = $this_TheInt_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getTheBooleanParserRuleCall_5());
		}
		this_TheBoolean_5=ruleTheBoolean
		{
			$current = $this_TheBoolean_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getEngineOperationParserRuleCall_6());
		}
		this_EngineOperation_6=ruleEngineOperation
		{
			$current = $this_EngineOperation_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getSensorOperationParserRuleCall_7());
		}
		this_SensorOperation_7=ruleSensorOperation
		{
			$current = $this_SensorOperation_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBinaryOperation
entryRuleBinaryOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinaryOperationRule()); }
	iv_ruleBinaryOperation=ruleBinaryOperation
	{ $current=$iv_ruleBinaryOperation.current; }
	EOF;

// Rule BinaryOperation
ruleBinaryOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBinaryOperationAccess().getSubstractionParserRuleCall_0());
		}
		this_Substraction_0=ruleSubstraction
		{
			$current = $this_Substraction_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBinaryOperationAccess().getComparaisonParserRuleCall_1());
		}
		this_Comparaison_1=ruleComparaison
		{
			$current = $this_Comparaison_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBinaryOperationAccess().getAssignementParserRuleCall_2());
		}
		this_Assignement_2=ruleAssignement
		{
			$current = $this_Assignement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBinaryOperationAccess().getDivisionParserRuleCall_3());
		}
		this_Division_3=ruleDivision
		{
			$current = $this_Division_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBinaryOperationAccess().getMultiplicationParserRuleCall_4());
		}
		this_Multiplication_4=ruleMultiplication
		{
			$current = $this_Multiplication_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBinaryOperationAccess().getAdditionParserRuleCall_5());
		}
		this_Addition_5=ruleAddition
		{
			$current = $this_Addition_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBinaryOperationAccess().getMinusEqualParserRuleCall_6());
		}
		this_MinusEqual_6=ruleMinusEqual
		{
			$current = $this_MinusEqual_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBinaryOperationAccess().getPlusEqualParserRuleCall_7());
		}
		this_PlusEqual_7=rulePlusEqual
		{
			$current = $this_PlusEqual_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getVariableAccess().getUnIntegerParserRuleCall_0());
		}
		this_UnInteger_0=ruleUnInteger
		{
			$current = $this_UnInteger_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getVariableAccess().getUnStringParserRuleCall_1());
		}
		this_UnString_1=ruleUnString
		{
			$current = $this_UnString_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getVariableAccess().getUnBooleanParserRuleCall_2());
		}
		this_UnBoolean_2=ruleUnBoolean
		{
			$current = $this_UnBoolean_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getVariableAccess().getUnDoubleParserRuleCall_3());
		}
		this_UnDouble_3=ruleUnDouble
		{
			$current = $this_UnDouble_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleComparaison
entryRuleComparaison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparaisonRule()); }
	iv_ruleComparaison=ruleComparaison
	{ $current=$iv_ruleComparaison.current; }
	EOF;

// Rule Comparaison
ruleComparaison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getComparaisonAccess().getGTParserRuleCall_0());
		}
		this_GT_0=ruleGT
		{
			$current = $this_GT_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getComparaisonAccess().getEqualParserRuleCall_1());
		}
		this_Equal_1=ruleEqual
		{
			$current = $this_Equal_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getComparaisonAccess().getLTParserRuleCall_2());
		}
		this_LT_2=ruleLT
		{
			$current = $this_LT_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getComparaisonAccess().getDifferentParserRuleCall_3());
		}
		this_Different_3=ruleDifferent
		{
			$current = $this_Different_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getComparaisonAccess().getGTorEqualParserRuleCall_4());
		}
		this_GTorEqual_4=ruleGTorEqual
		{
			$current = $this_GTorEqual_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getComparaisonAccess().getLTorEqualParserRuleCall_5());
		}
		this_LTorEqual_5=ruleLTorEqual
		{
			$current = $this_LTorEqual_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEngine
entryRuleEngine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEngineRule()); }
	iv_ruleEngine=ruleEngine
	{ $current=$iv_ruleEngine.current; }
	EOF;

// Rule Engine
ruleEngine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		/* */
	}
	{
		newCompositeNode(grammarAccess.getEngineAccess().getWheelEngineParserRuleCall());
	}
	this_WheelEngine_0=ruleWheelEngine
	{
		$current = $this_WheelEngine_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleSensor
entryRuleSensor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSensorRule()); }
	iv_ruleSensor=ruleSensor
	{ $current=$iv_ruleSensor.current; }
	EOF;

// Rule Sensor
ruleSensor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSensorAccess().getLaserSensorParserRuleCall_0());
		}
		this_LaserSensor_0=ruleLaserSensor
		{
			$current = $this_LaserSensor_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSensorAccess().getColorSensorParserRuleCall_1());
		}
		this_ColorSensor_1=ruleColorSensor
		{
			$current = $this_ColorSensor_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSensorAccess().getUltraSonicSensorParserRuleCall_2());
		}
		this_UltraSonicSensor_2=ruleUltraSonicSensor
		{
			$current = $this_UltraSonicSensor_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSensorAccess().getGyroSensorParserRuleCall_3());
		}
		this_GyroSensor_3=ruleGyroSensor
		{
			$current = $this_GyroSensor_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSensorAccess().getGPSSensorParserRuleCall_4());
		}
		this_GPSSensor_4=ruleGPSSensor
		{
			$current = $this_GPSSensor_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleWheelEngine
entryRuleWheelEngine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWheelEngineRule()); }
	iv_ruleWheelEngine=ruleWheelEngine
	{ $current=$iv_ruleWheelEngine.current; }
	EOF;

// Rule WheelEngine
ruleWheelEngine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='WheelEngine'
		{
			newLeafNode(otherlv_0, grammarAccess.getWheelEngineAccess().getWheelEngineKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWheelEngineAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWheelEngineRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"langageCompilation.concrete.syntax.LegoLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getWheelEngineAccess().getPositionEStringParserRuleCall_2_0());
				}
				lv_position_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWheelEngineRule());
					}
					set(
						$current,
						"position",
						lv_position_2_0,
						"langageCompilation.concrete.syntax.LegoLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleColorSensor
entryRuleColorSensor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColorSensorRule()); }
	iv_ruleColorSensor=ruleColorSensor
	{ $current=$iv_ruleColorSensor.current; }
	EOF;

// Rule ColorSensor
ruleColorSensor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ColorSensor'
		{
			newLeafNode(otherlv_0, grammarAccess.getColorSensorAccess().getColorSensorKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getColorSensorAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColorSensorRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"langageCompilation.concrete.syntax.LegoLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getColorSensorAccess().getPositionEIntParserRuleCall_2_0());
				}
				lv_position_2_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColorSensorRule());
					}
					set(
						$current,
						"position",
						lv_position_2_0,
						"langageCompilation.concrete.syntax.LegoLang.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLaserSensor
entryRuleLaserSensor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLaserSensorRule()); }
	iv_ruleLaserSensor=ruleLaserSensor
	{ $current=$iv_ruleLaserSensor.current; }
	EOF;

// Rule LaserSensor
ruleLaserSensor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='LaserSensor'
		{
			newLeafNode(otherlv_0, grammarAccess.getLaserSensorAccess().getLaserSensorKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLaserSensorAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLaserSensorRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"langageCompilation.concrete.syntax.LegoLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLaserSensorAccess().getPositionEIntParserRuleCall_2_0());
				}
				lv_position_2_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLaserSensorRule());
					}
					set(
						$current,
						"position",
						lv_position_2_0,
						"langageCompilation.concrete.syntax.LegoLang.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGPSSensor
entryRuleGPSSensor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGPSSensorRule()); }
	iv_ruleGPSSensor=ruleGPSSensor
	{ $current=$iv_ruleGPSSensor.current; }
	EOF;

// Rule GPSSensor
ruleGPSSensor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='GPSSensor'
		{
			newLeafNode(otherlv_0, grammarAccess.getGPSSensorAccess().getGPSSensorKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGPSSensorAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGPSSensorRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"langageCompilation.concrete.syntax.LegoLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getGPSSensorAccess().getPositionEIntParserRuleCall_2_0());
				}
				lv_position_2_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGPSSensorRule());
					}
					set(
						$current,
						"position",
						lv_position_2_0,
						"langageCompilation.concrete.syntax.LegoLang.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGyroSensor
entryRuleGyroSensor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGyroSensorRule()); }
	iv_ruleGyroSensor=ruleGyroSensor
	{ $current=$iv_ruleGyroSensor.current; }
	EOF;

// Rule GyroSensor
ruleGyroSensor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='GyroSensor'
		{
			newLeafNode(otherlv_0, grammarAccess.getGyroSensorAccess().getGyroSensorKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGyroSensorAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGyroSensorRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"langageCompilation.concrete.syntax.LegoLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getGyroSensorAccess().getPositionEIntParserRuleCall_2_0());
				}
				lv_position_2_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGyroSensorRule());
					}
					set(
						$current,
						"position",
						lv_position_2_0,
						"langageCompilation.concrete.syntax.LegoLang.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleUltraSonicSensor
entryRuleUltraSonicSensor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUltraSonicSensorRule()); }
	iv_ruleUltraSonicSensor=ruleUltraSonicSensor
	{ $current=$iv_ruleUltraSonicSensor.current; }
	EOF;

// Rule UltraSonicSensor
ruleUltraSonicSensor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='UltraSonicSensor'
		{
			newLeafNode(otherlv_0, grammarAccess.getUltraSonicSensorAccess().getUltraSonicSensorKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUltraSonicSensorAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUltraSonicSensorRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"langageCompilation.concrete.syntax.LegoLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUltraSonicSensorAccess().getPositionEIntParserRuleCall_2_0());
				}
				lv_position_2_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUltraSonicSensorRule());
					}
					set(
						$current,
						"position",
						lv_position_2_0,
						"langageCompilation.concrete.syntax.LegoLang.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCar
entryRuleCar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCarRule()); }
	iv_ruleCar=ruleCar
	{ $current=$iv_ruleCar.current; }
	EOF;

// Rule Car
ruleCar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Car'
		{
			newLeafNode(otherlv_0, grammarAccess.getCarAccess().getCarKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCarAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCarRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"langageCompilation.concrete.syntax.LegoLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getCarAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCarAccess().getSensorSensorParserRuleCall_3_0());
				}
				lv_sensor_3_0=ruleSensor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCarRule());
					}
					add(
						$current,
						"sensor",
						lv_sensor_3_0,
						"langageCompilation.concrete.syntax.LegoLang.Sensor");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getCarAccess().getEngineEngineParserRuleCall_4_0());
				}
				lv_engine_4_0=ruleEngine
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCarRule());
					}
					add(
						$current,
						"engine",
						lv_engine_4_0,
						"langageCompilation.concrete.syntax.LegoLang.Engine");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getCarAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleEngineOperation
entryRuleEngineOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEngineOperationRule()); }
	iv_ruleEngineOperation=ruleEngineOperation
	{ $current=$iv_ruleEngineOperation.current; }
	EOF;

// Rule EngineOperation
ruleEngineOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		/* */
	}
	{
		newCompositeNode(grammarAccess.getEngineOperationAccess().getVitesseOperationParserRuleCall());
	}
	this_VitesseOperation_0=ruleVitesseOperation
	{
		$current = $this_VitesseOperation_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleSensorOperation
entryRuleSensorOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSensorOperationRule()); }
	iv_ruleSensorOperation=ruleSensorOperation
	{ $current=$iv_ruleSensorOperation.current; }
	EOF;

// Rule SensorOperation
ruleSensorOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSensorOperationAccess().getRangeOperationParserRuleCall_0());
		}
		this_RangeOperation_0=ruleRangeOperation
		{
			$current = $this_RangeOperation_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSensorOperationAccess().getColorOperationParserRuleCall_1());
		}
		this_ColorOperation_1=ruleColorOperation
		{
			$current = $this_ColorOperation_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSensorOperationAccess().getIntensityOperationParserRuleCall_2());
		}
		this_IntensityOperation_2=ruleIntensityOperation
		{
			$current = $this_IntensityOperation_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSensorOperationAccess().getXGPSOperationParserRuleCall_3());
		}
		this_XGPSOperation_3=ruleXGPSOperation
		{
			$current = $this_XGPSOperation_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSensorOperationAccess().getYGPSOperationParserRuleCall_4());
		}
		this_YGPSOperation_4=ruleYGPSOperation
		{
			$current = $this_YGPSOperation_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSensorOperationAccess().getAngleOperationParserRuleCall_5());
		}
		this_AngleOperation_5=ruleAngleOperation
		{
			$current = $this_AngleOperation_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSensorOperationAccess().getDistanceOperationParserRuleCall_6());
		}
		this_DistanceOperation_6=ruleDistanceOperation
		{
			$current = $this_DistanceOperation_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVitesseOperation
entryRuleVitesseOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVitesseOperationRule()); }
	iv_ruleVitesseOperation=ruleVitesseOperation
	{ $current=$iv_ruleVitesseOperation.current; }
	EOF;

// Rule VitesseOperation
ruleVitesseOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVitesseOperationRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getVitesseOperationAccess().getWheelengineWheelEngineCrossReference_0_0());
				}
				ruleFQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getVitesseOperationAccess().getColonKeyword_1());
		}
		otherlv_2='vitesse'
		{
			newLeafNode(otherlv_2, grammarAccess.getVitesseOperationAccess().getVitesseKeyword_2());
		}
		otherlv_3='='
		{
			newLeafNode(otherlv_3, grammarAccess.getVitesseOperationAccess().getEqualsSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVitesseOperationAccess().getRightExpressionParserRuleCall_4_0());
				}
				lv_right_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVitesseOperationRule());
					}
					set(
						$current,
						"right",
						lv_right_4_0,
						"langageCompilation.concrete.syntax.LegoLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleColorOperation
entryRuleColorOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColorOperationRule()); }
	iv_ruleColorOperation=ruleColorOperation
	{ $current=$iv_ruleColorOperation.current; }
	EOF;

// Rule ColorOperation
ruleColorOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='get'
		{
			newLeafNode(otherlv_0, grammarAccess.getColorOperationAccess().getGetKeyword_0());
		}
		otherlv_1='color'
		{
			newLeafNode(otherlv_1, grammarAccess.getColorOperationAccess().getColorKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getColorOperationAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getColorOperationRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getColorOperationAccess().getColorsensorColorSensorCrossReference_3_0());
				}
				ruleFQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getColorOperationAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleIntensityOperation
entryRuleIntensityOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntensityOperationRule()); }
	iv_ruleIntensityOperation=ruleIntensityOperation
	{ $current=$iv_ruleIntensityOperation.current; }
	EOF;

// Rule IntensityOperation
ruleIntensityOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='get'
		{
			newLeafNode(otherlv_0, grammarAccess.getIntensityOperationAccess().getGetKeyword_0());
		}
		otherlv_1='intensity'
		{
			newLeafNode(otherlv_1, grammarAccess.getIntensityOperationAccess().getIntensityKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getIntensityOperationAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntensityOperationRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getIntensityOperationAccess().getColorsensorColorSensorCrossReference_3_0());
				}
				ruleFQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getIntensityOperationAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleRangeOperation
entryRuleRangeOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRangeOperationRule()); }
	iv_ruleRangeOperation=ruleRangeOperation
	{ $current=$iv_ruleRangeOperation.current; }
	EOF;

// Rule RangeOperation
ruleRangeOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='get'
		{
			newLeafNode(otherlv_0, grammarAccess.getRangeOperationAccess().getGetKeyword_0());
		}
		otherlv_1='range'
		{
			newLeafNode(otherlv_1, grammarAccess.getRangeOperationAccess().getRangeKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getRangeOperationAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRangeOperationRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getRangeOperationAccess().getLasersensorLaserSensorCrossReference_3_0());
				}
				ruleFQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getRangeOperationAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleXGPSOperation
entryRuleXGPSOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXGPSOperationRule()); }
	iv_ruleXGPSOperation=ruleXGPSOperation
	{ $current=$iv_ruleXGPSOperation.current; }
	EOF;

// Rule XGPSOperation
ruleXGPSOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='get'
		{
			newLeafNode(otherlv_0, grammarAccess.getXGPSOperationAccess().getGetKeyword_0());
		}
		otherlv_1='x'
		{
			newLeafNode(otherlv_1, grammarAccess.getXGPSOperationAccess().getXKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXGPSOperationAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXGPSOperationRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getXGPSOperationAccess().getGpssensorGPSSensorCrossReference_3_0());
				}
				ruleFQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getXGPSOperationAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleYGPSOperation
entryRuleYGPSOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getYGPSOperationRule()); }
	iv_ruleYGPSOperation=ruleYGPSOperation
	{ $current=$iv_ruleYGPSOperation.current; }
	EOF;

// Rule YGPSOperation
ruleYGPSOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='get'
		{
			newLeafNode(otherlv_0, grammarAccess.getYGPSOperationAccess().getGetKeyword_0());
		}
		otherlv_1='y'
		{
			newLeafNode(otherlv_1, grammarAccess.getYGPSOperationAccess().getYKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getYGPSOperationAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getYGPSOperationRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getYGPSOperationAccess().getGpssensorGPSSensorCrossReference_3_0());
				}
				ruleFQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getYGPSOperationAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleAngleOperation
entryRuleAngleOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAngleOperationRule()); }
	iv_ruleAngleOperation=ruleAngleOperation
	{ $current=$iv_ruleAngleOperation.current; }
	EOF;

// Rule AngleOperation
ruleAngleOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='get'
		{
			newLeafNode(otherlv_0, grammarAccess.getAngleOperationAccess().getGetKeyword_0());
		}
		otherlv_1='angle'
		{
			newLeafNode(otherlv_1, grammarAccess.getAngleOperationAccess().getAngleKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getAngleOperationAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAngleOperationRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getAngleOperationAccess().getGyrosensorGyroSensorCrossReference_3_0());
				}
				ruleFQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getAngleOperationAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleDistanceOperation
entryRuleDistanceOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDistanceOperationRule()); }
	iv_ruleDistanceOperation=ruleDistanceOperation
	{ $current=$iv_ruleDistanceOperation.current; }
	EOF;

// Rule DistanceOperation
ruleDistanceOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='get'
		{
			newLeafNode(otherlv_0, grammarAccess.getDistanceOperationAccess().getGetKeyword_0());
		}
		otherlv_1='distance'
		{
			newLeafNode(otherlv_1, grammarAccess.getDistanceOperationAccess().getDistanceKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getDistanceOperationAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDistanceOperationRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getDistanceOperationAccess().getUltrasonicsensorUltraSonicSensorCrossReference_3_0());
				}
				ruleFQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getDistanceOperationAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleConditionEtat
entryRuleConditionEtat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionEtatRule()); }
	iv_ruleConditionEtat=ruleConditionEtat
	{ $current=$iv_ruleConditionEtat.current; }
	EOF;

// Rule ConditionEtat
ruleConditionEtat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getConditionEtatAccess().getIfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionEtatAccess().getConditionComparaisonParserRuleCall_1_0());
				}
				lv_Condition_1_0=ruleComparaison
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionEtatRule());
					}
					add(
						$current,
						"Condition",
						lv_Condition_1_0,
						"langageCompilation.concrete.syntax.LegoLang.Comparaison");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='and'
			{
				newLeafNode(otherlv_2, grammarAccess.getConditionEtatAccess().getAndKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionEtatAccess().getConditionComparaisonParserRuleCall_2_1_0());
					}
					lv_Condition_3_0=ruleComparaison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionEtatRule());
						}
						add(
							$current,
							"Condition",
							lv_Condition_3_0,
							"langageCompilation.concrete.syntax.LegoLang.Comparaison");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_4='or'
			{
				newLeafNode(otherlv_4, grammarAccess.getConditionEtatAccess().getOrKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionEtatAccess().getConditionComparaisonParserRuleCall_3_1_0());
					}
					lv_Condition_5_0=ruleComparaison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionEtatRule());
						}
						add(
							$current,
							"Condition",
							lv_Condition_5_0,
							"langageCompilation.concrete.syntax.LegoLang.Comparaison");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getConditionEtatAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionEtatAccess().getThenStatementParserRuleCall_5_0());
				}
				lv_then_7_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionEtatRule());
					}
					add(
						$current,
						"then",
						lv_then_7_0,
						"langageCompilation.concrete.syntax.LegoLang.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getConditionEtatAccess().getRightCurlyBracketKeyword_6());
		}
		(
			otherlv_9='else{'
			{
				newLeafNode(otherlv_9, grammarAccess.getConditionEtatAccess().getElseKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionEtatAccess().getElseStatementParserRuleCall_7_1_0());
					}
					lv_else_10_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionEtatRule());
						}
						add(
							$current,
							"else",
							lv_else_10_0,
							"langageCompilation.concrete.syntax.LegoLang.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_11='}'
			{
				newLeafNode(otherlv_11, grammarAccess.getConditionEtatAccess().getRightCurlyBracketKeyword_7_2());
			}
		)?
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleWhileLoop
entryRuleWhileLoop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileLoopRule()); }
	iv_ruleWhileLoop=ruleWhileLoop
	{ $current=$iv_ruleWhileLoop.current; }
	EOF;

// Rule WhileLoop
ruleWhileLoop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhileLoopAccess().getWhileKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileLoopAccess().getLoopConditionComparaisonParserRuleCall_1_0());
				}
				lv_LoopCondition_1_0=ruleComparaison
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileLoopRule());
					}
					set(
						$current,
						"LoopCondition",
						lv_LoopCondition_1_0,
						"langageCompilation.concrete.syntax.LegoLang.Comparaison");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getWhileLoopAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileLoopAccess().getStatementStatementParserRuleCall_3_0());
				}
				lv_statement_3_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileLoopRule());
					}
					add(
						$current,
						"statement",
						lv_statement_3_0,
						"langageCompilation.concrete.syntax.LegoLang.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getWhileLoopAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleMethodePrint
entryRuleMethodePrint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodePrintRule()); }
	iv_ruleMethodePrint=ruleMethodePrint
	{ $current=$iv_ruleMethodePrint.current; }
	EOF;

// Rule MethodePrint
ruleMethodePrint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getMethodePrintAccess().getMethodePrintAction_0(),
					$current);
			}
		)
		otherlv_1='print('
		{
			newLeafNode(otherlv_1, grammarAccess.getMethodePrintAccess().getPrintKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMethodePrintAccess().getExpressionExpressionParserRuleCall_2_0_0());
					}
					lv_expression_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMethodePrintRule());
						}
						add(
							$current,
							"expression",
							lv_expression_2_0,
							"langageCompilation.concrete.syntax.LegoLang.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getMethodePrintAccess().getCommaKeyword_2_1());
			}
		)+
		otherlv_4=');'
		{
			newLeafNode(otherlv_4, grammarAccess.getMethodePrintAccess().getRightParenthesisSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleVariableRef
entryRuleVariableRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRefRule()); }
	iv_ruleVariableRef=ruleVariableRef
	{ $current=$iv_ruleVariableRef.current; }
	EOF;

// Rule VariableRef
ruleVariableRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableRefRule());
				}
			}
			{
				newCompositeNode(grammarAccess.getVariableRefAccess().getVariableVariableCrossReference_0());
			}
			ruleEString
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleSubstraction
entryRuleSubstraction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubstractionRule()); }
	iv_ruleSubstraction=ruleSubstraction
	{ $current=$iv_ruleSubstraction.current; }
	EOF;

// Rule Substraction
ruleSubstraction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getSubstractionAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubstractionAccess().getLeftExpressionParserRuleCall_1_0());
				}
				lv_left_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubstractionRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"langageCompilation.concrete.syntax.LegoLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='-'
		{
			newLeafNode(otherlv_2, grammarAccess.getSubstractionAccess().getHyphenMinusKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubstractionAccess().getRightExpressionParserRuleCall_3_0());
				}
				lv_right_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubstractionRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"langageCompilation.concrete.syntax.LegoLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getSubstractionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	iv_ruleAddition=ruleAddition
	{ $current=$iv_ruleAddition.current; }
	EOF;

// Rule Addition
ruleAddition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getAdditionAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAdditionAccess().getLeftExpressionParserRuleCall_1_0());
				}
				lv_left_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAdditionRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"langageCompilation.concrete.syntax.LegoLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='+'
		{
			newLeafNode(otherlv_2, grammarAccess.getAdditionAccess().getPlusSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAdditionAccess().getRightExpressionParserRuleCall_3_0());
				}
				lv_right_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAdditionRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"langageCompilation.concrete.syntax.LegoLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getAdditionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	iv_ruleMultiplication=ruleMultiplication
	{ $current=$iv_ruleMultiplication.current; }
	EOF;

// Rule Multiplication
ruleMultiplication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getMultiplicationAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiplicationAccess().getLeftExpressionParserRuleCall_1_0());
				}
				lv_left_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiplicationRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"langageCompilation.concrete.syntax.LegoLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='*'
		{
			newLeafNode(otherlv_2, grammarAccess.getMultiplicationAccess().getAsteriskKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiplicationAccess().getRightExpressionParserRuleCall_3_0());
				}
				lv_right_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiplicationRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"langageCompilation.concrete.syntax.LegoLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getMultiplicationAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleDivision
entryRuleDivision returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDivisionRule()); }
	iv_ruleDivision=ruleDivision
	{ $current=$iv_ruleDivision.current; }
	EOF;

// Rule Division
ruleDivision returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getDivisionAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDivisionAccess().getLeftExpressionParserRuleCall_1_0());
				}
				lv_left_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDivisionRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"langageCompilation.concrete.syntax.LegoLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='/'
		{
			newLeafNode(otherlv_2, grammarAccess.getDivisionAccess().getSolidusKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDivisionAccess().getRightExpressionParserRuleCall_3_0());
				}
				lv_right_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDivisionRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"langageCompilation.concrete.syntax.LegoLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getDivisionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleGT
entryRuleGT returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGTRule()); }
	iv_ruleGT=ruleGT
	{ $current=$iv_ruleGT.current; }
	EOF;

// Rule GT
ruleGT returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getGTAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGTAccess().getLeftExpressionParserRuleCall_1_0());
				}
				lv_left_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGTRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"langageCompilation.concrete.syntax.LegoLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='>'
		{
			newLeafNode(otherlv_2, grammarAccess.getGTAccess().getGreaterThanSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGTAccess().getRightExpressionParserRuleCall_3_0());
				}
				lv_right_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGTRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"langageCompilation.concrete.syntax.LegoLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getGTAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleLT
entryRuleLT returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLTRule()); }
	iv_ruleLT=ruleLT
	{ $current=$iv_ruleLT.current; }
	EOF;

// Rule LT
ruleLT returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getLTAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLTAccess().getLeftExpressionParserRuleCall_1_0());
				}
				lv_left_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLTRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"langageCompilation.concrete.syntax.LegoLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='<'
		{
			newLeafNode(otherlv_2, grammarAccess.getLTAccess().getLessThanSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLTAccess().getRightExpressionParserRuleCall_3_0());
				}
				lv_right_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLTRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"langageCompilation.concrete.syntax.LegoLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getLTAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleEqual
entryRuleEqual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualRule()); }
	iv_ruleEqual=ruleEqual
	{ $current=$iv_ruleEqual.current; }
	EOF;

// Rule Equal
ruleEqual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getEqualAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEqualAccess().getLeftExpressionParserRuleCall_1_0());
				}
				lv_left_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEqualRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"langageCompilation.concrete.syntax.LegoLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='=='
		{
			newLeafNode(otherlv_2, grammarAccess.getEqualAccess().getEqualsSignEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEqualAccess().getRightExpressionParserRuleCall_3_0());
				}
				lv_right_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEqualRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"langageCompilation.concrete.syntax.LegoLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getEqualAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleDifferent
entryRuleDifferent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDifferentRule()); }
	iv_ruleDifferent=ruleDifferent
	{ $current=$iv_ruleDifferent.current; }
	EOF;

// Rule Different
ruleDifferent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getDifferentAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDifferentAccess().getLeftExpressionParserRuleCall_1_0());
				}
				lv_left_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDifferentRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"langageCompilation.concrete.syntax.LegoLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='!='
		{
			newLeafNode(otherlv_2, grammarAccess.getDifferentAccess().getExclamationMarkEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDifferentAccess().getRightExpressionParserRuleCall_3_0());
				}
				lv_right_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDifferentRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"langageCompilation.concrete.syntax.LegoLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getDifferentAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleLTorEqual
entryRuleLTorEqual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLTorEqualRule()); }
	iv_ruleLTorEqual=ruleLTorEqual
	{ $current=$iv_ruleLTorEqual.current; }
	EOF;

// Rule LTorEqual
ruleLTorEqual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getLTorEqualAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLTorEqualAccess().getLeftExpressionParserRuleCall_1_0());
				}
				lv_left_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLTorEqualRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"langageCompilation.concrete.syntax.LegoLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='<='
		{
			newLeafNode(otherlv_2, grammarAccess.getLTorEqualAccess().getLessThanSignEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLTorEqualAccess().getRightExpressionParserRuleCall_3_0());
				}
				lv_right_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLTorEqualRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"langageCompilation.concrete.syntax.LegoLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getLTorEqualAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleGTorEqual
entryRuleGTorEqual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGTorEqualRule()); }
	iv_ruleGTorEqual=ruleGTorEqual
	{ $current=$iv_ruleGTorEqual.current; }
	EOF;

// Rule GTorEqual
ruleGTorEqual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getGTorEqualAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGTorEqualAccess().getLeftExpressionParserRuleCall_1_0());
				}
				lv_left_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGTorEqualRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"langageCompilation.concrete.syntax.LegoLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='>='
		{
			newLeafNode(otherlv_2, grammarAccess.getGTorEqualAccess().getGreaterThanSignEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGTorEqualAccess().getRightExpressionParserRuleCall_3_0());
				}
				lv_right_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGTorEqualRule());
					}
					set(
						$current,
						"right",
						lv_right_3_0,
						"langageCompilation.concrete.syntax.LegoLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getGTorEqualAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleAssignement
entryRuleAssignement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignementRule()); }
	iv_ruleAssignement=ruleAssignement
	{ $current=$iv_ruleAssignement.current; }
	EOF;

// Rule Assignement
ruleAssignement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getAssignementAccess().getAssignementAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getAssignementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignementAccess().getLeftExpressionParserRuleCall_2_0());
				}
				lv_left_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignementRule());
					}
					set(
						$current,
						"left",
						lv_left_2_0,
						"langageCompilation.concrete.syntax.LegoLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='='
		{
			newLeafNode(otherlv_3, grammarAccess.getAssignementAccess().getEqualsSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignementAccess().getRightExpressionParserRuleCall_4_0());
				}
				lv_right_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignementRule());
					}
					set(
						$current,
						"right",
						lv_right_4_0,
						"langageCompilation.concrete.syntax.LegoLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=');'
		{
			newLeafNode(otherlv_5, grammarAccess.getAssignementAccess().getRightParenthesisSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRulePlusEqual
entryRulePlusEqual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlusEqualRule()); }
	iv_rulePlusEqual=rulePlusEqual
	{ $current=$iv_rulePlusEqual.current; }
	EOF;

// Rule PlusEqual
rulePlusEqual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getPlusEqualAccess().getPlusEqualAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getPlusEqualAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPlusEqualAccess().getLeftExpressionParserRuleCall_2_0());
				}
				lv_left_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPlusEqualRule());
					}
					set(
						$current,
						"left",
						lv_left_2_0,
						"langageCompilation.concrete.syntax.LegoLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='+='
		{
			newLeafNode(otherlv_3, grammarAccess.getPlusEqualAccess().getPlusSignEqualsSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPlusEqualAccess().getRightExpressionParserRuleCall_4_0());
				}
				lv_right_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPlusEqualRule());
					}
					set(
						$current,
						"right",
						lv_right_4_0,
						"langageCompilation.concrete.syntax.LegoLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=');'
		{
			newLeafNode(otherlv_5, grammarAccess.getPlusEqualAccess().getRightParenthesisSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleMinusEqual
entryRuleMinusEqual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMinusEqualRule()); }
	iv_ruleMinusEqual=ruleMinusEqual
	{ $current=$iv_ruleMinusEqual.current; }
	EOF;

// Rule MinusEqual
ruleMinusEqual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getMinusEqualAccess().getMinusEqualAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getMinusEqualAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMinusEqualAccess().getLeftExpressionParserRuleCall_2_0());
				}
				lv_left_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMinusEqualRule());
					}
					set(
						$current,
						"left",
						lv_left_2_0,
						"langageCompilation.concrete.syntax.LegoLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='-='
		{
			newLeafNode(otherlv_3, grammarAccess.getMinusEqualAccess().getHyphenMinusEqualsSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMinusEqualAccess().getRightExpressionParserRuleCall_4_0());
				}
				lv_right_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMinusEqualRule());
					}
					set(
						$current,
						"right",
						lv_right_4_0,
						"langageCompilation.concrete.syntax.LegoLang.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=');'
		{
			newLeafNode(otherlv_5, grammarAccess.getMinusEqualAccess().getRightParenthesisSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleEBoolean
entryRuleEBoolean returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEBooleanRule()); }
	iv_ruleEBoolean=ruleEBoolean
	{ $current=$iv_ruleEBoolean.current.getText(); }
	EOF;

// Rule EBoolean
ruleEBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleUnInteger
entryRuleUnInteger returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnIntegerRule()); }
	iv_ruleUnInteger=ruleUnInteger
	{ $current=$iv_ruleUnInteger.current; }
	EOF;

// Rule UnInteger
ruleUnInteger returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getUnIntegerAccess().getUnIntegerAction_0(),
					$current);
			}
		)
		(
			(
				lv_isConst_1_0='const'
				{
					newLeafNode(lv_isConst_1_0, grammarAccess.getUnIntegerAccess().getIsConstConstKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnIntegerRule());
					}
					setWithLastConsumed($current, "isConst", lv_isConst_1_0 != null, "const");
				}
			)
		)?
		otherlv_2='int'
		{
			newLeafNode(otherlv_2, grammarAccess.getUnIntegerAccess().getIntKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUnIntegerAccess().getNameEStringParserRuleCall_3_0());
				}
				lv_name_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnIntegerRule());
					}
					set(
						$current,
						"name",
						lv_name_3_0,
						"langageCompilation.concrete.syntax.LegoLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='='
			{
				newLeafNode(otherlv_4, grammarAccess.getUnIntegerAccess().getEqualsSignKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getUnIntegerAccess().getInitialeValueEIntParserRuleCall_4_1_0());
					}
					lv_initialeValue_5_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnIntegerRule());
						}
						set(
							$current,
							"initialeValue",
							lv_initialeValue_5_0,
							"langageCompilation.concrete.syntax.LegoLang.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getUnIntegerAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleUnDouble
entryRuleUnDouble returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnDoubleRule()); }
	iv_ruleUnDouble=ruleUnDouble
	{ $current=$iv_ruleUnDouble.current; }
	EOF;

// Rule UnDouble
ruleUnDouble returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getUnDoubleAccess().getUnDoubleAction_0(),
					$current);
			}
		)
		(
			(
				lv_isConst_1_0='const'
				{
					newLeafNode(lv_isConst_1_0, grammarAccess.getUnDoubleAccess().getIsConstConstKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnDoubleRule());
					}
					setWithLastConsumed($current, "isConst", lv_isConst_1_0 != null, "const");
				}
			)
		)?
		otherlv_2='double'
		{
			newLeafNode(otherlv_2, grammarAccess.getUnDoubleAccess().getDoubleKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUnDoubleAccess().getNameEStringParserRuleCall_3_0());
				}
				lv_name_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnDoubleRule());
					}
					set(
						$current,
						"name",
						lv_name_3_0,
						"langageCompilation.concrete.syntax.LegoLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='='
			{
				newLeafNode(otherlv_4, grammarAccess.getUnDoubleAccess().getEqualsSignKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getUnDoubleAccess().getInitialeValue1EIntParserRuleCall_4_1_0());
					}
					lv_initialeValue1_5_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnDoubleRule());
						}
						set(
							$current,
							"initialeValue1",
							lv_initialeValue1_5_0,
							"langageCompilation.concrete.syntax.LegoLang.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6='.'
				{
					newLeafNode(otherlv_6, grammarAccess.getUnDoubleAccess().getFullStopKeyword_4_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getUnDoubleAccess().getInitialeValue2EIntParserRuleCall_4_2_1_0());
						}
						lv_initialeValue2_7_0=ruleEInt
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getUnDoubleRule());
							}
							set(
								$current,
								"initialeValue2",
								lv_initialeValue2_7_0,
								"langageCompilation.concrete.syntax.LegoLang.EInt");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)?
		otherlv_8=';'
		{
			newLeafNode(otherlv_8, grammarAccess.getUnDoubleAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleUnBoolean
entryRuleUnBoolean returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnBooleanRule()); }
	iv_ruleUnBoolean=ruleUnBoolean
	{ $current=$iv_ruleUnBoolean.current; }
	EOF;

// Rule UnBoolean
ruleUnBoolean returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getUnBooleanAccess().getUnBooleanAction_0(),
					$current);
			}
		)
		(
			(
				lv_isConst_1_0='const'
				{
					newLeafNode(lv_isConst_1_0, grammarAccess.getUnBooleanAccess().getIsConstConstKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnBooleanRule());
					}
					setWithLastConsumed($current, "isConst", lv_isConst_1_0 != null, "const");
				}
			)
		)?
		otherlv_2='bool'
		{
			newLeafNode(otherlv_2, grammarAccess.getUnBooleanAccess().getBoolKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUnBooleanAccess().getNameEStringParserRuleCall_3_0());
				}
				lv_name_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnBooleanRule());
					}
					set(
						$current,
						"name",
						lv_name_3_0,
						"langageCompilation.concrete.syntax.LegoLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='='
			{
				newLeafNode(otherlv_4, grammarAccess.getUnBooleanAccess().getEqualsSignKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getUnBooleanAccess().getInitialeValueEBooleanParserRuleCall_4_1_0());
					}
					lv_initialeValue_5_0=ruleEBoolean
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnBooleanRule());
						}
						set(
							$current,
							"initialeValue",
							lv_initialeValue_5_0,
							"langageCompilation.concrete.syntax.LegoLang.EBoolean");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getUnBooleanAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleUnString
entryRuleUnString returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnStringRule()); }
	iv_ruleUnString=ruleUnString
	{ $current=$iv_ruleUnString.current; }
	EOF;

// Rule UnString
ruleUnString returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getUnStringAccess().getUnStringAction_0(),
					$current);
			}
		)
		(
			(
				lv_isConst_1_0='const'
				{
					newLeafNode(lv_isConst_1_0, grammarAccess.getUnStringAccess().getIsConstConstKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUnStringRule());
					}
					setWithLastConsumed($current, "isConst", lv_isConst_1_0 != null, "const");
				}
			)
		)?
		otherlv_2='string'
		{
			newLeafNode(otherlv_2, grammarAccess.getUnStringAccess().getStringKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUnStringAccess().getNameEStringParserRuleCall_3_0());
				}
				lv_name_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnStringRule());
					}
					set(
						$current,
						"name",
						lv_name_3_0,
						"langageCompilation.concrete.syntax.LegoLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='='
			{
				newLeafNode(otherlv_4, grammarAccess.getUnStringAccess().getEqualsSignKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getUnStringAccess().getInitialeValueEStringParserRuleCall_4_1_0());
					}
					lv_initialeValue_5_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnStringRule());
						}
						set(
							$current,
							"initialeValue",
							lv_initialeValue_5_0,
							"langageCompilation.concrete.syntax.LegoLang.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getUnStringAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleTheDouble
entryRuleTheDouble returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTheDoubleRule()); }
	iv_ruleTheDouble=ruleTheDouble
	{ $current=$iv_ruleTheDouble.current; }
	EOF;

// Rule TheDouble
ruleTheDouble returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getTheDoubleAccess().getTheDoubleAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTheDoubleAccess().getValue1EIntParserRuleCall_1_0());
				}
				lv_value1_1_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTheDoubleRule());
					}
					set(
						$current,
						"value1",
						lv_value1_1_0,
						"langageCompilation.concrete.syntax.LegoLang.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getTheDoubleAccess().getFullStopKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTheDoubleAccess().getValue2EIntParserRuleCall_3_0());
				}
				lv_value2_3_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTheDoubleRule());
					}
					set(
						$current,
						"value2",
						lv_value2_3_0,
						"langageCompilation.concrete.syntax.LegoLang.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTheInt
entryRuleTheInt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTheIntRule()); }
	iv_ruleTheInt=ruleTheInt
	{ $current=$iv_ruleTheInt.current; }
	EOF;

// Rule TheInt
ruleTheInt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getTheIntAccess().getTheIntAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTheIntAccess().getValueEIntParserRuleCall_1_0());
				}
				lv_value_1_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTheIntRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"langageCompilation.concrete.syntax.LegoLang.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTheBoolean
entryRuleTheBoolean returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTheBooleanRule()); }
	iv_ruleTheBoolean=ruleTheBoolean
	{ $current=$iv_ruleTheBoolean.current; }
	EOF;

// Rule TheBoolean
ruleTheBoolean returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getTheBooleanAccess().getTheBooleanAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTheBooleanAccess().getValueEBooleanParserRuleCall_1_0());
				}
				lv_value_1_0=ruleEBoolean
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTheBooleanRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"langageCompilation.concrete.syntax.LegoLang.EBoolean");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTheString
entryRuleTheString returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTheStringRule()); }
	iv_ruleTheString=ruleTheString
	{ $current=$iv_ruleTheString.current; }
	EOF;

// Rule TheString
ruleTheString returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getTheStringAccess().getTheStringAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTheStringAccess().getValueEStringParserRuleCall_1_0());
				}
				lv_value_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTheStringRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"langageCompilation.concrete.syntax.LegoLang.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFQNRule()); }
	iv_ruleFQN=ruleFQN
	{ $current=$iv_ruleFQN.current.getText(); }
	EOF;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
