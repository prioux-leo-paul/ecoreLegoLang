/*
 * generated by Xtext 2.25.0
 */
package langageCompilation.concrete.syntax.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LegoLangGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProgramKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_4_0 = (RuleCall)cStatementAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Program returns Program:
		//    {Program}
		//    'Program'
		//    name=EString
		//    '{'
		//        (statement+=Statement)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Program}
		//'Program'
		//name=EString
		//'{'
		//    (statement+=Statement)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Program}
		public Action getProgramAction_0() { return cProgramAction_0; }
		
		//'Program'
		public Keyword getProgramKeyword_1() { return cProgramKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(statement+=Statement)*
		public Assignment getStatementAssignment_4() { return cStatementAssignment_4; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_4_0() { return cStatementStatementParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWhileLoopParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConditionEtatParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMethodePrintParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Statement returns Statement:
		//    WhileLoop | Variable | Expression | ConditionEtat | MethodePrint ;
		@Override public ParserRule getRule() { return rule; }
		
		//WhileLoop | Variable | Expression | ConditionEtat | MethodePrint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WhileLoop
		public RuleCall getWhileLoopParserRuleCall_0() { return cWhileLoopParserRuleCall_0; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_1() { return cVariableParserRuleCall_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
		
		//ConditionEtat
		public RuleCall getConditionEtatParserRuleCall_3() { return cConditionEtatParserRuleCall_3; }
		
		//MethodePrint
		public RuleCall getMethodePrintParserRuleCall_4() { return cMethodePrintParserRuleCall_4; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBinaryOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTheStringParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTheDoubleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTheIntParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTheBooleanParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Expression returns Expression:
		//    VariableRef | BinaryOperation | TheString | TheDouble | TheInt | TheBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableRef | BinaryOperation | TheString | TheDouble | TheInt | TheBoolean
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableRef
		public RuleCall getVariableRefParserRuleCall_0() { return cVariableRefParserRuleCall_0; }
		
		//BinaryOperation
		public RuleCall getBinaryOperationParserRuleCall_1() { return cBinaryOperationParserRuleCall_1; }
		
		//TheString
		public RuleCall getTheStringParserRuleCall_2() { return cTheStringParserRuleCall_2; }
		
		//TheDouble
		public RuleCall getTheDoubleParserRuleCall_3() { return cTheDoubleParserRuleCall_3; }
		
		//TheInt
		public RuleCall getTheIntParserRuleCall_4() { return cTheIntParserRuleCall_4; }
		
		//TheBoolean
		public RuleCall getTheBooleanParserRuleCall_5() { return cTheBooleanParserRuleCall_5; }
	}
	public class BinaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.BinaryOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubstractionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComparaisonParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssignementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDivisionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMultiplicationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAdditionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMinusEqualParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cPlusEqualParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//BinaryOperation returns BinaryOperation:
		//    Substraction | Comparaison | Assignement | Division | Multiplication | Addition | MinusEqual | PlusEqual;
		@Override public ParserRule getRule() { return rule; }
		
		//Substraction | Comparaison | Assignement | Division | Multiplication | Addition | MinusEqual | PlusEqual
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Substraction
		public RuleCall getSubstractionParserRuleCall_0() { return cSubstractionParserRuleCall_0; }
		
		//Comparaison
		public RuleCall getComparaisonParserRuleCall_1() { return cComparaisonParserRuleCall_1; }
		
		//Assignement
		public RuleCall getAssignementParserRuleCall_2() { return cAssignementParserRuleCall_2; }
		
		//Division
		public RuleCall getDivisionParserRuleCall_3() { return cDivisionParserRuleCall_3; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_4() { return cMultiplicationParserRuleCall_4; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_5() { return cAdditionParserRuleCall_5; }
		
		//MinusEqual
		public RuleCall getMinusEqualParserRuleCall_6() { return cMinusEqualParserRuleCall_6; }
		
		//PlusEqual
		public RuleCall getPlusEqualParserRuleCall_7() { return cPlusEqualParserRuleCall_7; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnIntegerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnBooleanParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUnDoubleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Variable returns Variable:
		//    UnInteger | UnString | UnBoolean | UnDouble;
		@Override public ParserRule getRule() { return rule; }
		
		//UnInteger | UnString | UnBoolean | UnDouble
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnInteger
		public RuleCall getUnIntegerParserRuleCall_0() { return cUnIntegerParserRuleCall_0; }
		
		//UnString
		public RuleCall getUnStringParserRuleCall_1() { return cUnStringParserRuleCall_1; }
		
		//UnBoolean
		public RuleCall getUnBooleanParserRuleCall_2() { return cUnBooleanParserRuleCall_2; }
		
		//UnDouble
		public RuleCall getUnDoubleParserRuleCall_3() { return cUnDoubleParserRuleCall_3; }
	}
	public class ComparaisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Comparaison");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGTParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEqualParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLTParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDifferentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGTorEqualParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLTorEqualParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Comparaison returns Comparaison:
		//      GT | Equal | LT | Different | GTorEqual | LTorEqual ;
		@Override public ParserRule getRule() { return rule; }
		
		//GT | Equal | LT | Different | GTorEqual | LTorEqual
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GT
		public RuleCall getGTParserRuleCall_0() { return cGTParserRuleCall_0; }
		
		//Equal
		public RuleCall getEqualParserRuleCall_1() { return cEqualParserRuleCall_1; }
		
		//LT
		public RuleCall getLTParserRuleCall_2() { return cLTParserRuleCall_2; }
		
		//Different
		public RuleCall getDifferentParserRuleCall_3() { return cDifferentParserRuleCall_3; }
		
		//GTorEqual
		public RuleCall getGTorEqualParserRuleCall_4() { return cGTorEqualParserRuleCall_4; }
		
		//LTorEqual
		public RuleCall getLTorEqualParserRuleCall_5() { return cLTorEqualParserRuleCall_5; }
	}
	public class ConditionEtatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.ConditionEtat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionComparaisonParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenStatementParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseStatementParserRuleCall_5_1_0 = (RuleCall)cElseAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//ConditionEtat returns ConditionEtat:
		//    'if'
		//        Condition=Comparaison '{'
		//            (then+=Statement )*
		//        '}'
		//        ('else{'else+=Statement'}' )?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'if'
		//    Condition=Comparaison '{'
		//        (then+=Statement )*
		//    '}'
		//    ('else{'else+=Statement'}' )?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//Condition=Comparaison
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Comparaison
		public RuleCall getConditionComparaisonParserRuleCall_1_0() { return cConditionComparaisonParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(then+=Statement )*
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }
		
		//Statement
		public RuleCall getThenStatementParserRuleCall_3_0() { return cThenStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//('else{'else+=Statement'}' )?
		public Group getGroup_5() { return cGroup_5; }
		
		//'else{'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//else+=Statement
		public Assignment getElseAssignment_5_1() { return cElseAssignment_5_1; }
		
		//Statement
		public RuleCall getElseStatementParserRuleCall_5_1_0() { return cElseStatementParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class WhileLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.WhileLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLoopConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLoopConditionComparaisonParserRuleCall_1_0 = (RuleCall)cLoopConditionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatementParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//WhileLoop returns WhileLoop:
		//    'while'
		//        LoopCondition=Comparaison
		//    '{'
		//        (statement+=Statement )*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'while'
		//    LoopCondition=Comparaison
		//'{'
		//    (statement+=Statement )*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//LoopCondition=Comparaison
		public Assignment getLoopConditionAssignment_1() { return cLoopConditionAssignment_1; }
		
		//Comparaison
		public RuleCall getLoopConditionComparaisonParserRuleCall_1_0() { return cLoopConditionComparaisonParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(statement+=Statement )*
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_3_0() { return cStatementStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MethodePrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.MethodePrint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodePrintAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrintKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0_0 = (RuleCall)cExpressionAssignment_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MethodePrint returns MethodePrint:
		//    {MethodePrint}
		//    'print('
		//    (expression+=Expression ",")+
		//    ');';
		@Override public ParserRule getRule() { return rule; }
		
		//{MethodePrint}
		//'print('
		//(expression+=Expression ",")+
		//');'
		public Group getGroup() { return cGroup; }
		
		//{MethodePrint}
		public Action getMethodePrintAction_0() { return cMethodePrintAction_0; }
		
		//'print('
		public Keyword getPrintKeyword_1() { return cPrintKeyword_1; }
		
		//(expression+=Expression ",")+
		public Group getGroup_2() { return cGroup_2; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_2_0() { return cExpressionAssignment_2_0; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0_0() { return cExpressionExpressionParserRuleCall_2_0_0; }
		
		//","
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }
		
		//');'
		public Keyword getRightParenthesisSemicolonKeyword_3() { return cRightParenthesisSemicolonKeyword_3; }
	}
	public class VariableRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.VariableRef");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_0 = (CrossReference)cVariableAssignment.eContents().get(0);
		private final RuleCall cVariableVariableEStringParserRuleCall_0_1 = (RuleCall)cVariableVariableCrossReference_0.eContents().get(1);
		
		//VariableRef returns VariableRef:
		//    variable=[Variable|EString]
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[Variable|EString]
		public Assignment getVariableAssignment() { return cVariableAssignment; }
		
		//[Variable|EString]
		public CrossReference getVariableVariableCrossReference_0() { return cVariableVariableCrossReference_0; }
		
		//EString
		public RuleCall getVariableVariableEStringParserRuleCall_0_1() { return cVariableVariableEStringParserRuleCall_0_1; }
	}
	public class SubstractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Substraction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Substraction returns Substraction:
		//       '(' left=Expression '-'
		//        right=Expression ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' left=Expression '-'
		// right=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Addition returns Addition:
		//       '(' left=Expression '+'
		//        right=Expression ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' left=Expression '+'
		// right=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Multiplication returns Multiplication:
		//       '(' left=Expression '*'
		//        right=Expression ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' left=Expression '*'
		// right=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Division");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cSolidusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Division returns Division:
		//       '(' left=Expression '/'
		//        right=Expression ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' left=Expression '/'
		// right=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class GTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.GT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GT returns GT:
		//    '(' left=Expression '>'
		//    right=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' left=Expression '>'
		//right=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.LT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LT returns LT:
		//    '(' left=Expression '<'
		//    right=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' left=Expression '<'
		//right=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Equal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Equal returns Equal:
		//    '(' left=Expression '=='
		//    right=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' left=Expression '=='
		//right=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DifferentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Different");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Different returns Different:
		//    '(' left=Expression '!='
		//    right=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' left=Expression '!='
		//right=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_2() { return cExclamationMarkEqualsSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LTorEqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.LTorEqual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LTorEqual returns LTorEqual:
		//    '(' left=Expression '<='
		//    right=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' left=Expression '<='
		//right=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class GTorEqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.GTorEqual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GTorEqual returns GTorEqual:
		//    '(' left=Expression '>='
		//    right=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' left=Expression '>='
		//right=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AssignementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Assignement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssignementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftExpressionParserRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightExpressionParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Assignement returns Assignement:
		//    {Assignement}
		//    '('left=Expression
		//    '=' right= Expression ');'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Assignement}
		//'('left=Expression
		//'=' right= Expression ');'
		public Group getGroup() { return cGroup; }
		
		//{Assignement}
		public Action getAssignementAction_0() { return cAssignementAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//left=Expression
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_2_0() { return cLeftExpressionParserRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//right= Expression
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_4_0() { return cRightExpressionParserRuleCall_4_0; }
		
		//');'
		public Keyword getRightParenthesisSemicolonKeyword_5() { return cRightParenthesisSemicolonKeyword_5; }
	}
	public class PlusEqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.PlusEqual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPlusEqualAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftExpressionParserRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightExpressionParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PlusEqual returns PlusEqual:
		//    {PlusEqual}
		//    '('left=Expression
		//    '+=' right= Expression ');'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{PlusEqual}
		//'('left=Expression
		//'+=' right= Expression ');'
		public Group getGroup() { return cGroup; }
		
		//{PlusEqual}
		public Action getPlusEqualAction_0() { return cPlusEqualAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//left=Expression
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_2_0() { return cLeftExpressionParserRuleCall_2_0; }
		
		//'+='
		public Keyword getPlusSignEqualsSignKeyword_3() { return cPlusSignEqualsSignKeyword_3; }
		
		//right= Expression
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_4_0() { return cRightExpressionParserRuleCall_4_0; }
		
		//');'
		public Keyword getRightParenthesisSemicolonKeyword_5() { return cRightParenthesisSemicolonKeyword_5; }
	}
	public class MinusEqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.MinusEqual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMinusEqualAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftExpressionParserRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightExpressionParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MinusEqual returns MinusEqual:
		//    {MinusEqual}
		//    '('left=Expression
		//    '-=' right= Expression ');'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{MinusEqual}
		//'('left=Expression
		//'-=' right= Expression ');'
		public Group getGroup() { return cGroup; }
		
		//{MinusEqual}
		public Action getMinusEqualAction_0() { return cMinusEqualAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//left=Expression
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_2_0() { return cLeftExpressionParserRuleCall_2_0; }
		
		//'-='
		public Keyword getHyphenMinusEqualsSignKeyword_3() { return cHyphenMinusEqualsSignKeyword_3; }
		
		//right= Expression
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_4_0() { return cRightExpressionParserRuleCall_4_0; }
		
		//');'
		public Keyword getRightParenthesisSemicolonKeyword_5() { return cRightParenthesisSemicolonKeyword_5; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class UnIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.UnInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnIntegerAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsConstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsConstConstKeyword_1_0 = (Keyword)cIsConstAssignment_1.eContents().get(0);
		private final Keyword cIntKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInitialeValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInitialeValueEIntParserRuleCall_4_1_0 = (RuleCall)cInitialeValueAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//UnInteger returns UnInteger:
		//    {UnInteger}
		//    (isConst?='const')?
		//    'int'
		//    name=EString
		//    ('=' initialeValue=EInt)? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//{UnInteger}
		//(isConst?='const')?
		//'int'
		//name=EString
		//('=' initialeValue=EInt)? ";"
		public Group getGroup() { return cGroup; }
		
		//{UnInteger}
		public Action getUnIntegerAction_0() { return cUnIntegerAction_0; }
		
		//(isConst?='const')?
		public Assignment getIsConstAssignment_1() { return cIsConstAssignment_1; }
		
		//'const'
		public Keyword getIsConstConstKeyword_1_0() { return cIsConstConstKeyword_1_0; }
		
		//'int'
		public Keyword getIntKeyword_2() { return cIntKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//('=' initialeValue=EInt)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }
		
		//initialeValue=EInt
		public Assignment getInitialeValueAssignment_4_1() { return cInitialeValueAssignment_4_1; }
		
		//EInt
		public RuleCall getInitialeValueEIntParserRuleCall_4_1_0() { return cInitialeValueEIntParserRuleCall_4_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class UnDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.UnDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnDoubleAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsConstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsConstConstKeyword_1_0 = (Keyword)cIsConstAssignment_1.eContents().get(0);
		private final Keyword cDoubleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInitialeValue1Assignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInitialeValue1EIntParserRuleCall_4_1_0 = (RuleCall)cInitialeValue1Assignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cFullStopKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cInitialeValue2Assignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cInitialeValue2EIntParserRuleCall_4_2_1_0 = (RuleCall)cInitialeValue2Assignment_4_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//UnDouble returns UnDouble:
		//    {UnDouble}
		//    (isConst?='const')?
		//    'double'
		//    name=EString
		//    ('=' initialeValue1=EInt ('.' initialeValue2=EInt)?)? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//{UnDouble}
		//(isConst?='const')?
		//'double'
		//name=EString
		//('=' initialeValue1=EInt ('.' initialeValue2=EInt)?)? ";"
		public Group getGroup() { return cGroup; }
		
		//{UnDouble}
		public Action getUnDoubleAction_0() { return cUnDoubleAction_0; }
		
		//(isConst?='const')?
		public Assignment getIsConstAssignment_1() { return cIsConstAssignment_1; }
		
		//'const'
		public Keyword getIsConstConstKeyword_1_0() { return cIsConstConstKeyword_1_0; }
		
		//'double'
		public Keyword getDoubleKeyword_2() { return cDoubleKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//('=' initialeValue1=EInt ('.' initialeValue2=EInt)?)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }
		
		//initialeValue1=EInt
		public Assignment getInitialeValue1Assignment_4_1() { return cInitialeValue1Assignment_4_1; }
		
		//EInt
		public RuleCall getInitialeValue1EIntParserRuleCall_4_1_0() { return cInitialeValue1EIntParserRuleCall_4_1_0; }
		
		//('.' initialeValue2=EInt)?
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'.'
		public Keyword getFullStopKeyword_4_2_0() { return cFullStopKeyword_4_2_0; }
		
		//initialeValue2=EInt
		public Assignment getInitialeValue2Assignment_4_2_1() { return cInitialeValue2Assignment_4_2_1; }
		
		//EInt
		public RuleCall getInitialeValue2EIntParserRuleCall_4_2_1_0() { return cInitialeValue2EIntParserRuleCall_4_2_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class UnBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.UnBoolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnBooleanAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsConstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsConstConstKeyword_1_0 = (Keyword)cIsConstAssignment_1.eContents().get(0);
		private final Keyword cBoolKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInitialeValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInitialeValueEBooleanParserRuleCall_4_1_0 = (RuleCall)cInitialeValueAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//UnBoolean returns UnBoolean:
		//    {UnBoolean}
		//    (isConst?='const')?
		//    'bool'
		//    name=EString
		//    ('=' initialeValue=EBoolean)? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//{UnBoolean}
		//(isConst?='const')?
		//'bool'
		//name=EString
		//('=' initialeValue=EBoolean)? ";"
		public Group getGroup() { return cGroup; }
		
		//{UnBoolean}
		public Action getUnBooleanAction_0() { return cUnBooleanAction_0; }
		
		//(isConst?='const')?
		public Assignment getIsConstAssignment_1() { return cIsConstAssignment_1; }
		
		//'const'
		public Keyword getIsConstConstKeyword_1_0() { return cIsConstConstKeyword_1_0; }
		
		//'bool'
		public Keyword getBoolKeyword_2() { return cBoolKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//('=' initialeValue=EBoolean)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }
		
		//initialeValue=EBoolean
		public Assignment getInitialeValueAssignment_4_1() { return cInitialeValueAssignment_4_1; }
		
		//EBoolean
		public RuleCall getInitialeValueEBooleanParserRuleCall_4_1_0() { return cInitialeValueEBooleanParserRuleCall_4_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class UnStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.UnString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsConstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsConstConstKeyword_1_0 = (Keyword)cIsConstAssignment_1.eContents().get(0);
		private final Keyword cStringKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInitialeValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInitialeValueEStringParserRuleCall_4_1_0 = (RuleCall)cInitialeValueAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//UnString returns UnString:
		//    {UnString}
		//    (isConst?='const')?
		//    'string'
		//    name=EString
		//    ('=' initialeValue=EString)? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//{UnString}
		//(isConst?='const')?
		//'string'
		//name=EString
		//('=' initialeValue=EString)? ";"
		public Group getGroup() { return cGroup; }
		
		//{UnString}
		public Action getUnStringAction_0() { return cUnStringAction_0; }
		
		//(isConst?='const')?
		public Assignment getIsConstAssignment_1() { return cIsConstAssignment_1; }
		
		//'const'
		public Keyword getIsConstConstKeyword_1_0() { return cIsConstConstKeyword_1_0; }
		
		//'string'
		public Keyword getStringKeyword_2() { return cStringKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//('=' initialeValue=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }
		
		//initialeValue=EString
		public Assignment getInitialeValueAssignment_4_1() { return cInitialeValueAssignment_4_1; }
		
		//EString
		public RuleCall getInitialeValueEStringParserRuleCall_4_1_0() { return cInitialeValueEStringParserRuleCall_4_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class TheDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.TheDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTheDoubleAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValue1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValue1EIntParserRuleCall_1_0 = (RuleCall)cValue1Assignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValue2Assignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValue2EIntParserRuleCall_2_1_0 = (RuleCall)cValue2Assignment_2_1.eContents().get(0);
		
		//TheDouble returns TheDouble:
		//    {TheDouble}
		//    value1=EInt ('.' value2=EInt)? ;
		@Override public ParserRule getRule() { return rule; }
		
		//{TheDouble}
		//value1=EInt ('.' value2=EInt)?
		public Group getGroup() { return cGroup; }
		
		//{TheDouble}
		public Action getTheDoubleAction_0() { return cTheDoubleAction_0; }
		
		//value1=EInt
		public Assignment getValue1Assignment_1() { return cValue1Assignment_1; }
		
		//EInt
		public RuleCall getValue1EIntParserRuleCall_1_0() { return cValue1EIntParserRuleCall_1_0; }
		
		//('.' value2=EInt)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//value2=EInt
		public Assignment getValue2Assignment_2_1() { return cValue2Assignment_2_1; }
		
		//EInt
		public RuleCall getValue2EIntParserRuleCall_2_1_0() { return cValue2EIntParserRuleCall_2_1_0; }
	}
	public class TheIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.TheInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTheIntAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEIntParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//TheInt returns TheInt:
		//    {TheInt}
		//    value=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//{TheInt}
		//value=EInt
		public Group getGroup() { return cGroup; }
		
		//{TheInt}
		public Action getTheIntAction_0() { return cTheIntAction_0; }
		
		//value=EInt
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_1_0() { return cValueEIntParserRuleCall_1_0; }
	}
	public class TheBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.TheBoolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTheBooleanAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEBooleanParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//TheBoolean returns TheBoolean:
		//    {TheBoolean}
		//    value=EBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//{TheBoolean}
		//value=EBoolean
		public Group getGroup() { return cGroup; }
		
		//{TheBoolean}
		public Action getTheBooleanAction_0() { return cTheBooleanAction_0; }
		
		//value=EBoolean
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//EBoolean
		public RuleCall getValueEBooleanParserRuleCall_1_0() { return cValueEBooleanParserRuleCall_1_0; }
	}
	public class TheStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.TheString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTheStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//TheString returns TheString:
		//    {TheString}
		//    value=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{TheString}
		//value=EString
		public Group getGroup() { return cGroup; }
		
		//{TheString}
		public Action getTheStringAction_0() { return cTheStringAction_0; }
		
		//value=EString
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_1_0() { return cValueEStringParserRuleCall_1_0; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private final ProgramElements pProgram;
	private final StatementElements pStatement;
	private final ExpressionElements pExpression;
	private final BinaryOperationElements pBinaryOperation;
	private final VariableElements pVariable;
	private final ComparaisonElements pComparaison;
	private final ConditionEtatElements pConditionEtat;
	private final EStringElements pEString;
	private final WhileLoopElements pWhileLoop;
	private final MethodePrintElements pMethodePrint;
	private final VariableRefElements pVariableRef;
	private final SubstractionElements pSubstraction;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final DivisionElements pDivision;
	private final GTElements pGT;
	private final LTElements pLT;
	private final EqualElements pEqual;
	private final DifferentElements pDifferent;
	private final LTorEqualElements pLTorEqual;
	private final GTorEqualElements pGTorEqual;
	private final AssignementElements pAssignement;
	private final PlusEqualElements pPlusEqual;
	private final MinusEqualElements pMinusEqual;
	private final EBooleanElements pEBoolean;
	private final UnIntegerElements pUnInteger;
	private final UnDoubleElements pUnDouble;
	private final UnBooleanElements pUnBoolean;
	private final UnStringElements pUnString;
	private final TheDoubleElements pTheDouble;
	private final TheIntElements pTheInt;
	private final TheBooleanElements pTheBoolean;
	private final TheStringElements pTheString;
	private final EIntElements pEInt;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LegoLangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pStatement = new StatementElements();
		this.pExpression = new ExpressionElements();
		this.pBinaryOperation = new BinaryOperationElements();
		this.pVariable = new VariableElements();
		this.pComparaison = new ComparaisonElements();
		this.pConditionEtat = new ConditionEtatElements();
		this.pEString = new EStringElements();
		this.pWhileLoop = new WhileLoopElements();
		this.pMethodePrint = new MethodePrintElements();
		this.pVariableRef = new VariableRefElements();
		this.pSubstraction = new SubstractionElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pDivision = new DivisionElements();
		this.pGT = new GTElements();
		this.pLT = new LTElements();
		this.pEqual = new EqualElements();
		this.pDifferent = new DifferentElements();
		this.pLTorEqual = new LTorEqualElements();
		this.pGTorEqual = new GTorEqualElements();
		this.pAssignement = new AssignementElements();
		this.pPlusEqual = new PlusEqualElements();
		this.pMinusEqual = new MinusEqualElements();
		this.pEBoolean = new EBooleanElements();
		this.pUnInteger = new UnIntegerElements();
		this.pUnDouble = new UnDoubleElements();
		this.pUnBoolean = new UnBooleanElements();
		this.pUnString = new UnStringElements();
		this.pTheDouble = new TheDoubleElements();
		this.pTheInt = new TheIntElements();
		this.pTheBoolean = new TheBooleanElements();
		this.pTheString = new TheStringElements();
		this.pEInt = new EIntElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("langageCompilation.concrete.syntax.LegoLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program returns Program:
	//    {Program}
	//    'Program'
	//    name=EString
	//    '{'
	//        (statement+=Statement)*
	//    '}';
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Statement returns Statement:
	//    WhileLoop | Variable | Expression | ConditionEtat | MethodePrint ;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Expression returns Expression:
	//    VariableRef | BinaryOperation | TheString | TheDouble | TheInt | TheBoolean;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//BinaryOperation returns BinaryOperation:
	//    Substraction | Comparaison | Assignement | Division | Multiplication | Addition | MinusEqual | PlusEqual;
	public BinaryOperationElements getBinaryOperationAccess() {
		return pBinaryOperation;
	}
	
	public ParserRule getBinaryOperationRule() {
		return getBinaryOperationAccess().getRule();
	}
	
	//Variable returns Variable:
	//    UnInteger | UnString | UnBoolean | UnDouble;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Comparaison returns Comparaison:
	//      GT | Equal | LT | Different | GTorEqual | LTorEqual ;
	public ComparaisonElements getComparaisonAccess() {
		return pComparaison;
	}
	
	public ParserRule getComparaisonRule() {
		return getComparaisonAccess().getRule();
	}
	
	//ConditionEtat returns ConditionEtat:
	//    'if'
	//        Condition=Comparaison '{'
	//            (then+=Statement )*
	//        '}'
	//        ('else{'else+=Statement'}' )?
	//    ;
	public ConditionEtatElements getConditionEtatAccess() {
		return pConditionEtat;
	}
	
	public ParserRule getConditionEtatRule() {
		return getConditionEtatAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//WhileLoop returns WhileLoop:
	//    'while'
	//        LoopCondition=Comparaison
	//    '{'
	//        (statement+=Statement )*
	//    '}';
	public WhileLoopElements getWhileLoopAccess() {
		return pWhileLoop;
	}
	
	public ParserRule getWhileLoopRule() {
		return getWhileLoopAccess().getRule();
	}
	
	//MethodePrint returns MethodePrint:
	//    {MethodePrint}
	//    'print('
	//    (expression+=Expression ",")+
	//    ');';
	public MethodePrintElements getMethodePrintAccess() {
		return pMethodePrint;
	}
	
	public ParserRule getMethodePrintRule() {
		return getMethodePrintAccess().getRule();
	}
	
	//VariableRef returns VariableRef:
	//    variable=[Variable|EString]
	//    ;
	public VariableRefElements getVariableRefAccess() {
		return pVariableRef;
	}
	
	public ParserRule getVariableRefRule() {
		return getVariableRefAccess().getRule();
	}
	
	//Substraction returns Substraction:
	//       '(' left=Expression '-'
	//        right=Expression ')'
	//    ;
	public SubstractionElements getSubstractionAccess() {
		return pSubstraction;
	}
	
	public ParserRule getSubstractionRule() {
		return getSubstractionAccess().getRule();
	}
	
	//Addition returns Addition:
	//       '(' left=Expression '+'
	//        right=Expression ')'
	//    ;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication returns Multiplication:
	//       '(' left=Expression '*'
	//        right=Expression ')'
	//    ;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Division returns Division:
	//       '(' left=Expression '/'
	//        right=Expression ')'
	//    ;
	public DivisionElements getDivisionAccess() {
		return pDivision;
	}
	
	public ParserRule getDivisionRule() {
		return getDivisionAccess().getRule();
	}
	
	//GT returns GT:
	//    '(' left=Expression '>'
	//    right=Expression ')';
	public GTElements getGTAccess() {
		return pGT;
	}
	
	public ParserRule getGTRule() {
		return getGTAccess().getRule();
	}
	
	//LT returns LT:
	//    '(' left=Expression '<'
	//    right=Expression ')';
	public LTElements getLTAccess() {
		return pLT;
	}
	
	public ParserRule getLTRule() {
		return getLTAccess().getRule();
	}
	
	//Equal returns Equal:
	//    '(' left=Expression '=='
	//    right=Expression ')';
	public EqualElements getEqualAccess() {
		return pEqual;
	}
	
	public ParserRule getEqualRule() {
		return getEqualAccess().getRule();
	}
	
	//Different returns Different:
	//    '(' left=Expression '!='
	//    right=Expression ')';
	public DifferentElements getDifferentAccess() {
		return pDifferent;
	}
	
	public ParserRule getDifferentRule() {
		return getDifferentAccess().getRule();
	}
	
	//LTorEqual returns LTorEqual:
	//    '(' left=Expression '<='
	//    right=Expression ')';
	public LTorEqualElements getLTorEqualAccess() {
		return pLTorEqual;
	}
	
	public ParserRule getLTorEqualRule() {
		return getLTorEqualAccess().getRule();
	}
	
	//GTorEqual returns GTorEqual:
	//    '(' left=Expression '>='
	//    right=Expression ')';
	public GTorEqualElements getGTorEqualAccess() {
		return pGTorEqual;
	}
	
	public ParserRule getGTorEqualRule() {
		return getGTorEqualAccess().getRule();
	}
	
	//Assignement returns Assignement:
	//    {Assignement}
	//    '('left=Expression
	//    '=' right= Expression ');'
	//    ;
	public AssignementElements getAssignementAccess() {
		return pAssignement;
	}
	
	public ParserRule getAssignementRule() {
		return getAssignementAccess().getRule();
	}
	
	//PlusEqual returns PlusEqual:
	//    {PlusEqual}
	//    '('left=Expression
	//    '+=' right= Expression ');'
	//    ;
	public PlusEqualElements getPlusEqualAccess() {
		return pPlusEqual;
	}
	
	public ParserRule getPlusEqualRule() {
		return getPlusEqualAccess().getRule();
	}
	
	//MinusEqual returns MinusEqual:
	//    {MinusEqual}
	//    '('left=Expression
	//    '-=' right= Expression ');'
	//    ;
	public MinusEqualElements getMinusEqualAccess() {
		return pMinusEqual;
	}
	
	public ParserRule getMinusEqualRule() {
		return getMinusEqualAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//UnInteger returns UnInteger:
	//    {UnInteger}
	//    (isConst?='const')?
	//    'int'
	//    name=EString
	//    ('=' initialeValue=EInt)? ";";
	public UnIntegerElements getUnIntegerAccess() {
		return pUnInteger;
	}
	
	public ParserRule getUnIntegerRule() {
		return getUnIntegerAccess().getRule();
	}
	
	//UnDouble returns UnDouble:
	//    {UnDouble}
	//    (isConst?='const')?
	//    'double'
	//    name=EString
	//    ('=' initialeValue1=EInt ('.' initialeValue2=EInt)?)? ";";
	public UnDoubleElements getUnDoubleAccess() {
		return pUnDouble;
	}
	
	public ParserRule getUnDoubleRule() {
		return getUnDoubleAccess().getRule();
	}
	
	//UnBoolean returns UnBoolean:
	//    {UnBoolean}
	//    (isConst?='const')?
	//    'bool'
	//    name=EString
	//    ('=' initialeValue=EBoolean)? ";";
	public UnBooleanElements getUnBooleanAccess() {
		return pUnBoolean;
	}
	
	public ParserRule getUnBooleanRule() {
		return getUnBooleanAccess().getRule();
	}
	
	//UnString returns UnString:
	//    {UnString}
	//    (isConst?='const')?
	//    'string'
	//    name=EString
	//    ('=' initialeValue=EString)? ";";
	public UnStringElements getUnStringAccess() {
		return pUnString;
	}
	
	public ParserRule getUnStringRule() {
		return getUnStringAccess().getRule();
	}
	
	//TheDouble returns TheDouble:
	//    {TheDouble}
	//    value1=EInt ('.' value2=EInt)? ;
	public TheDoubleElements getTheDoubleAccess() {
		return pTheDouble;
	}
	
	public ParserRule getTheDoubleRule() {
		return getTheDoubleAccess().getRule();
	}
	
	//TheInt returns TheInt:
	//    {TheInt}
	//    value=EInt;
	public TheIntElements getTheIntAccess() {
		return pTheInt;
	}
	
	public ParserRule getTheIntRule() {
		return getTheIntAccess().getRule();
	}
	
	//TheBoolean returns TheBoolean:
	//    {TheBoolean}
	//    value=EBoolean;
	public TheBooleanElements getTheBooleanAccess() {
		return pTheBoolean;
	}
	
	public ParserRule getTheBooleanRule() {
		return getTheBooleanAccess().getRule();
	}
	
	//TheString returns TheString:
	//    {TheString}
	//    value=EString;
	public TheStringElements getTheStringAccess() {
		return pTheString;
	}
	
	public ParserRule getTheStringRule() {
		return getTheStringAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
