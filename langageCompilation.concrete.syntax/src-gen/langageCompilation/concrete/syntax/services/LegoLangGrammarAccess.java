/*
 * generated by Xtext 2.25.0
 */
package langageCompilation.concrete.syntax.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LegoLangGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProgramKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_4_0 = (RuleCall)cStatementAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Program returns Program:
		//    {Program}
		//    'Program'
		//    name=EString
		//    '{'
		//        (statement+=Statement)*  (';')?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Program}
		//'Program'
		//name=EString
		//'{'
		//    (statement+=Statement)*  (';')?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Program}
		public Action getProgramAction_0() { return cProgramAction_0; }
		
		//'Program'
		public Keyword getProgramKeyword_1() { return cProgramKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(statement+=Statement)*
		public Assignment getStatementAssignment_4() { return cStatementAssignment_4; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_4_0() { return cStatementStatementParserRuleCall_4_0; }
		
		//(';')?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWhileLoopParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConditionEtatParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMethodePrintParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cCarParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSensorParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cEngineParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cPauseParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Statement returns Statement:
		//    WhileLoop | Variable | Expression | ConditionEtat | MethodePrint | Car | Sensor | Engine | Pause;
		@Override public ParserRule getRule() { return rule; }
		
		//WhileLoop | Variable | Expression | ConditionEtat | MethodePrint | Car | Sensor | Engine | Pause
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WhileLoop
		public RuleCall getWhileLoopParserRuleCall_0() { return cWhileLoopParserRuleCall_0; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_1() { return cVariableParserRuleCall_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_2() { return cExpressionParserRuleCall_2; }
		
		//ConditionEtat
		public RuleCall getConditionEtatParserRuleCall_3() { return cConditionEtatParserRuleCall_3; }
		
		//MethodePrint
		public RuleCall getMethodePrintParserRuleCall_4() { return cMethodePrintParserRuleCall_4; }
		
		//Car
		public RuleCall getCarParserRuleCall_5() { return cCarParserRuleCall_5; }
		
		//Sensor
		public RuleCall getSensorParserRuleCall_6() { return cSensorParserRuleCall_6; }
		
		//Engine
		public RuleCall getEngineParserRuleCall_7() { return cEngineParserRuleCall_7; }
		
		//Pause
		public RuleCall getPauseParserRuleCall_8() { return cPauseParserRuleCall_8; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBinaryOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTheStringParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTheColorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTheDoubleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTheIntParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTheBooleanParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cEngineOperationParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cBreakMotorParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cSensorOperationParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cBooleanExpressionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//Expression returns Expression:
		//    VariableRef | BinaryOperation | TheString | TheColor | TheDouble | TheInt | TheBoolean | EngineOperation | BreakMotor | SensorOperation | BooleanExpression ;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableRef | BinaryOperation | TheString | TheColor | TheDouble | TheInt | TheBoolean | EngineOperation | BreakMotor | SensorOperation | BooleanExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VariableRef
		public RuleCall getVariableRefParserRuleCall_0() { return cVariableRefParserRuleCall_0; }
		
		//BinaryOperation
		public RuleCall getBinaryOperationParserRuleCall_1() { return cBinaryOperationParserRuleCall_1; }
		
		//TheString
		public RuleCall getTheStringParserRuleCall_2() { return cTheStringParserRuleCall_2; }
		
		//TheColor
		public RuleCall getTheColorParserRuleCall_3() { return cTheColorParserRuleCall_3; }
		
		//TheDouble
		public RuleCall getTheDoubleParserRuleCall_4() { return cTheDoubleParserRuleCall_4; }
		
		//TheInt
		public RuleCall getTheIntParserRuleCall_5() { return cTheIntParserRuleCall_5; }
		
		//TheBoolean
		public RuleCall getTheBooleanParserRuleCall_6() { return cTheBooleanParserRuleCall_6; }
		
		//EngineOperation
		public RuleCall getEngineOperationParserRuleCall_7() { return cEngineOperationParserRuleCall_7; }
		
		//BreakMotor
		public RuleCall getBreakMotorParserRuleCall_8() { return cBreakMotorParserRuleCall_8; }
		
		//SensorOperation
		public RuleCall getSensorOperationParserRuleCall_9() { return cSensorOperationParserRuleCall_9; }
		
		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_10() { return cBooleanExpressionParserRuleCall_10; }
	}
	public class BinaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.BinaryOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubstractionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComparaisonParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssignementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDivisionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMultiplicationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAdditionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMinusEqualParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cPlusEqualParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//BinaryOperation returns BinaryOperation:
		//    Substraction | Comparaison | Assignement | Division | Multiplication | Addition | MinusEqual | PlusEqual;
		@Override public ParserRule getRule() { return rule; }
		
		//Substraction | Comparaison | Assignement | Division | Multiplication | Addition | MinusEqual | PlusEqual
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Substraction
		public RuleCall getSubstractionParserRuleCall_0() { return cSubstractionParserRuleCall_0; }
		
		//Comparaison
		public RuleCall getComparaisonParserRuleCall_1() { return cComparaisonParserRuleCall_1; }
		
		//Assignement
		public RuleCall getAssignementParserRuleCall_2() { return cAssignementParserRuleCall_2; }
		
		//Division
		public RuleCall getDivisionParserRuleCall_3() { return cDivisionParserRuleCall_3; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_4() { return cMultiplicationParserRuleCall_4; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_5() { return cAdditionParserRuleCall_5; }
		
		//MinusEqual
		public RuleCall getMinusEqualParserRuleCall_6() { return cMinusEqualParserRuleCall_6; }
		
		//PlusEqual
		public RuleCall getPlusEqualParserRuleCall_7() { return cPlusEqualParserRuleCall_7; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnIntegerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnBooleanParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUnDoubleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUnColorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Variable returns Variable:
		//    UnInteger | UnString | UnBoolean | UnDouble | UnColor;
		@Override public ParserRule getRule() { return rule; }
		
		//UnInteger | UnString | UnBoolean | UnDouble | UnColor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnInteger
		public RuleCall getUnIntegerParserRuleCall_0() { return cUnIntegerParserRuleCall_0; }
		
		//UnString
		public RuleCall getUnStringParserRuleCall_1() { return cUnStringParserRuleCall_1; }
		
		//UnBoolean
		public RuleCall getUnBooleanParserRuleCall_2() { return cUnBooleanParserRuleCall_2; }
		
		//UnDouble
		public RuleCall getUnDoubleParserRuleCall_3() { return cUnDoubleParserRuleCall_3; }
		
		//UnColor
		public RuleCall getUnColorParserRuleCall_4() { return cUnColorParserRuleCall_4; }
	}
	public class ComparaisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Comparaison");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGTParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEqualParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLTParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDifferentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGTorEqualParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLTorEqualParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Comparaison returns Comparaison:
		//      GT | Equal | LT | Different | GTorEqual | LTorEqual ;
		@Override public ParserRule getRule() { return rule; }
		
		//GT | Equal | LT | Different | GTorEqual | LTorEqual
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GT
		public RuleCall getGTParserRuleCall_0() { return cGTParserRuleCall_0; }
		
		//Equal
		public RuleCall getEqualParserRuleCall_1() { return cEqualParserRuleCall_1; }
		
		//LT
		public RuleCall getLTParserRuleCall_2() { return cLTParserRuleCall_2; }
		
		//Different
		public RuleCall getDifferentParserRuleCall_3() { return cDifferentParserRuleCall_3; }
		
		//GTorEqual
		public RuleCall getGTorEqualParserRuleCall_4() { return cGTorEqualParserRuleCall_4; }
		
		//LTorEqual
		public RuleCall getLTorEqualParserRuleCall_5() { return cLTorEqualParserRuleCall_5; }
	}
	public class EngineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Engine");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWheelEngineParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMotorizedArmEngineParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPaintballLauncherEngineParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Engine returns Engine:
		//    WheelEngine | MotorizedArmEngine | PaintballLauncherEngine;
		@Override public ParserRule getRule() { return rule; }
		
		//WheelEngine | MotorizedArmEngine | PaintballLauncherEngine
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WheelEngine
		public RuleCall getWheelEngineParserRuleCall_0() { return cWheelEngineParserRuleCall_0; }
		
		//MotorizedArmEngine
		public RuleCall getMotorizedArmEngineParserRuleCall_1() { return cMotorizedArmEngineParserRuleCall_1; }
		
		//PaintballLauncherEngine
		public RuleCall getPaintballLauncherEngineParserRuleCall_2() { return cPaintballLauncherEngineParserRuleCall_2; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Sensor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLaserSensorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColorSensorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUltraSonicSensorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGyroSensorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGPSSensorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Sensor returns Sensor:
		//    LaserSensor | ColorSensor | UltraSonicSensor | GyroSensor | GPSSensor;
		@Override public ParserRule getRule() { return rule; }
		
		//LaserSensor | ColorSensor | UltraSonicSensor | GyroSensor | GPSSensor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LaserSensor
		public RuleCall getLaserSensorParserRuleCall_0() { return cLaserSensorParserRuleCall_0; }
		
		//ColorSensor
		public RuleCall getColorSensorParserRuleCall_1() { return cColorSensorParserRuleCall_1; }
		
		//UltraSonicSensor
		public RuleCall getUltraSonicSensorParserRuleCall_2() { return cUltraSonicSensorParserRuleCall_2; }
		
		//GyroSensor
		public RuleCall getGyroSensorParserRuleCall_3() { return cGyroSensorParserRuleCall_3; }
		
		//GPSSensor
		public RuleCall getGPSSensorParserRuleCall_4() { return cGPSSensorParserRuleCall_4; }
	}
	public class PauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Pause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Pause returns Pause:
		//    'stop''for' expression=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'stop''for' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//'stop'
		public Keyword getStopKeyword_0() { return cStopKeyword_0; }
		
		//'for'
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class WheelEngineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.WheelEngine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWheelEngineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPositionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPositionEStringParserRuleCall_3_0 = (RuleCall)cPositionAssignment_3.eContents().get(0);
		
		//WheelEngine returns WheelEngine:
		//    'WheelEngine'
		//    name=EString
		//    'on'
		//    position=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'WheelEngine'
		//name=EString
		//'on'
		//position=EString
		public Group getGroup() { return cGroup; }
		
		//'WheelEngine'
		public Keyword getWheelEngineKeyword_0() { return cWheelEngineKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'on'
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }
		
		//position=EString
		public Assignment getPositionAssignment_3() { return cPositionAssignment_3; }
		
		//EString
		public RuleCall getPositionEStringParserRuleCall_3_0() { return cPositionEStringParserRuleCall_3_0; }
	}
	public class MotorizedArmEngineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.MotorizedArmEngine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMotorizedArmEngineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPositionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPositionEStringParserRuleCall_3_0 = (RuleCall)cPositionAssignment_3.eContents().get(0);
		
		//MotorizedArmEngine returns MotorizedArmEngine:
		//    'MotorizedArmEngine'
		//    name=EString
		//    'on'
		//    position=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'MotorizedArmEngine'
		//name=EString
		//'on'
		//position=EString
		public Group getGroup() { return cGroup; }
		
		//'MotorizedArmEngine'
		public Keyword getMotorizedArmEngineKeyword_0() { return cMotorizedArmEngineKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'on'
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }
		
		//position=EString
		public Assignment getPositionAssignment_3() { return cPositionAssignment_3; }
		
		//EString
		public RuleCall getPositionEStringParserRuleCall_3_0() { return cPositionEStringParserRuleCall_3_0; }
	}
	public class PaintballLauncherEngineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.PaintballLauncherEngine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPaintballLauncherEngineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPositionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPositionEStringParserRuleCall_3_0 = (RuleCall)cPositionAssignment_3.eContents().get(0);
		
		//PaintballLauncherEngine returns PaintballLauncherEngine:
		//    'PaintballLauncherEngine'
		//    name=EString
		//    'on'
		//    position=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'PaintballLauncherEngine'
		//name=EString
		//'on'
		//position=EString
		public Group getGroup() { return cGroup; }
		
		//'PaintballLauncherEngine'
		public Keyword getPaintballLauncherEngineKeyword_0() { return cPaintballLauncherEngineKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'on'
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }
		
		//position=EString
		public Assignment getPositionAssignment_3() { return cPositionAssignment_3; }
		
		//EString
		public RuleCall getPositionEStringParserRuleCall_3_0() { return cPositionEStringParserRuleCall_3_0; }
	}
	public class ColorSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.ColorSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColorSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPositionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPositionEIntParserRuleCall_3_0 = (RuleCall)cPositionAssignment_3.eContents().get(0);
		
		//ColorSensor returns ColorSensor:
		//    'ColorSensor'
		//    name=EString
		//    'on'
		//    position=EInt
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'ColorSensor'
		//name=EString
		//'on'
		//position=EInt
		public Group getGroup() { return cGroup; }
		
		//'ColorSensor'
		public Keyword getColorSensorKeyword_0() { return cColorSensorKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'on'
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }
		
		//position=EInt
		public Assignment getPositionAssignment_3() { return cPositionAssignment_3; }
		
		//EInt
		public RuleCall getPositionEIntParserRuleCall_3_0() { return cPositionEIntParserRuleCall_3_0; }
	}
	public class LaserSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.LaserSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLaserSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPositionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPositionEIntParserRuleCall_3_0 = (RuleCall)cPositionAssignment_3.eContents().get(0);
		
		//LaserSensor returns LaserSensor:
		//    'LaserSensor'
		//    name=EString
		//    'on'
		//    position=EInt
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'LaserSensor'
		//name=EString
		//'on'
		//position=EInt
		public Group getGroup() { return cGroup; }
		
		//'LaserSensor'
		public Keyword getLaserSensorKeyword_0() { return cLaserSensorKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'on'
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }
		
		//position=EInt
		public Assignment getPositionAssignment_3() { return cPositionAssignment_3; }
		
		//EInt
		public RuleCall getPositionEIntParserRuleCall_3_0() { return cPositionEIntParserRuleCall_3_0; }
	}
	public class GPSSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.GPSSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGPSSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPositionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPositionEIntParserRuleCall_3_0 = (RuleCall)cPositionAssignment_3.eContents().get(0);
		
		//GPSSensor returns GPSSensor:
		//    'GPSSensor'
		//    name=EString
		//    'on'
		//    position=EInt
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'GPSSensor'
		//name=EString
		//'on'
		//position=EInt
		public Group getGroup() { return cGroup; }
		
		//'GPSSensor'
		public Keyword getGPSSensorKeyword_0() { return cGPSSensorKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'on'
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }
		
		//position=EInt
		public Assignment getPositionAssignment_3() { return cPositionAssignment_3; }
		
		//EInt
		public RuleCall getPositionEIntParserRuleCall_3_0() { return cPositionEIntParserRuleCall_3_0; }
	}
	public class GyroSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.GyroSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGyroSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPositionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPositionEIntParserRuleCall_3_0 = (RuleCall)cPositionAssignment_3.eContents().get(0);
		
		//GyroSensor returns GyroSensor:
		//    'GyroSensor'
		//    name=EString
		//    'on'
		//    position=EInt
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'GyroSensor'
		//name=EString
		//'on'
		//position=EInt
		public Group getGroup() { return cGroup; }
		
		//'GyroSensor'
		public Keyword getGyroSensorKeyword_0() { return cGyroSensorKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'on'
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }
		
		//position=EInt
		public Assignment getPositionAssignment_3() { return cPositionAssignment_3; }
		
		//EInt
		public RuleCall getPositionEIntParserRuleCall_3_0() { return cPositionEIntParserRuleCall_3_0; }
	}
	public class UltraSonicSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.UltraSonicSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUltraSonicSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPositionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPositionEIntParserRuleCall_3_0 = (RuleCall)cPositionAssignment_3.eContents().get(0);
		
		//UltraSonicSensor returns UltraSonicSensor:
		//    'UltraSonicSensor'
		//    name=EString
		//    'on'
		//    position=EInt
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'UltraSonicSensor'
		//name=EString
		//'on'
		//position=EInt
		public Group getGroup() { return cGroup; }
		
		//'UltraSonicSensor'
		public Keyword getUltraSonicSensorKeyword_0() { return cUltraSonicSensorKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'on'
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }
		
		//position=EInt
		public Assignment getPositionAssignment_3() { return cPositionAssignment_3; }
		
		//EInt
		public RuleCall getPositionEIntParserRuleCall_3_0() { return cPositionEIntParserRuleCall_3_0; }
	}
	public class CarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Car");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSensorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSensorSensorParserRuleCall_3_0 = (RuleCall)cSensorAssignment_3.eContents().get(0);
		private final Assignment cEngineAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEngineEngineParserRuleCall_4_0 = (RuleCall)cEngineAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Car returns Car:
		//    'Car'
		//    name=EString
		//    '{'
		//        (sensor+=Sensor)*
		//        (engine+=Engine)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Car'
		//name=EString
		//'{'
		//    (sensor+=Sensor)*
		//    (engine+=Engine)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Car'
		public Keyword getCarKeyword_0() { return cCarKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(sensor+=Sensor)*
		public Assignment getSensorAssignment_3() { return cSensorAssignment_3; }
		
		//Sensor
		public RuleCall getSensorSensorParserRuleCall_3_0() { return cSensorSensorParserRuleCall_3_0; }
		
		//(engine+=Engine)*
		public Assignment getEngineAssignment_4() { return cEngineAssignment_4; }
		
		//Engine
		public RuleCall getEngineEngineParserRuleCall_4_0() { return cEngineEngineParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EngineOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.EngineOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVitesseOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPositionOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cForceOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//EngineOperation returns EngineOperation:
		//     VitesseOperation | PositionOperation | ForceOperation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//VitesseOperation | PositionOperation | ForceOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VitesseOperation
		public RuleCall getVitesseOperationParserRuleCall_0() { return cVitesseOperationParserRuleCall_0; }
		
		//PositionOperation
		public RuleCall getPositionOperationParserRuleCall_1() { return cPositionOperationParserRuleCall_1; }
		
		//ForceOperation
		public RuleCall getForceOperationParserRuleCall_2() { return cForceOperationParserRuleCall_2; }
	}
	public class SensorOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.SensorOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRangeOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColorOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntensityOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXGPSOperationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cYGPSOperationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAngleOperationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDistanceOperationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//SensorOperation returns SensorOperation:
		//    RangeOperation | ColorOperation | IntensityOperation | XGPSOperation | YGPSOperation | AngleOperation | DistanceOperation ;
		@Override public ParserRule getRule() { return rule; }
		
		//RangeOperation | ColorOperation | IntensityOperation | XGPSOperation | YGPSOperation | AngleOperation | DistanceOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RangeOperation
		public RuleCall getRangeOperationParserRuleCall_0() { return cRangeOperationParserRuleCall_0; }
		
		//ColorOperation
		public RuleCall getColorOperationParserRuleCall_1() { return cColorOperationParserRuleCall_1; }
		
		//IntensityOperation
		public RuleCall getIntensityOperationParserRuleCall_2() { return cIntensityOperationParserRuleCall_2; }
		
		//XGPSOperation
		public RuleCall getXGPSOperationParserRuleCall_3() { return cXGPSOperationParserRuleCall_3; }
		
		//YGPSOperation
		public RuleCall getYGPSOperationParserRuleCall_4() { return cYGPSOperationParserRuleCall_4; }
		
		//AngleOperation
		public RuleCall getAngleOperationParserRuleCall_5() { return cAngleOperationParserRuleCall_5; }
		
		//DistanceOperation
		public RuleCall getDistanceOperationParserRuleCall_6() { return cDistanceOperationParserRuleCall_6; }
	}
	public class VitesseOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.VitesseOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cVitesseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cWheelengineAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cWheelengineWheelEngineCrossReference_3_0 = (CrossReference)cWheelengineAssignment_3.eContents().get(0);
		private final RuleCall cWheelengineWheelEngineFQNParserRuleCall_3_0_1 = (RuleCall)cWheelengineWheelEngineCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRightAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRightExpressionParserRuleCall_6_0 = (RuleCall)cRightAssignment_6.eContents().get(0);
		
		//VitesseOperation returns VitesseOperation:
		//    'set' 'vitesse''('wheelengine=[WheelEngine|FQN]')'
		//    '='
		//    right=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'set' 'vitesse''('wheelengine=[WheelEngine|FQN]')'
		//'='
		//right=Expression
		public Group getGroup() { return cGroup; }
		
		//'set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//'vitesse'
		public Keyword getVitesseKeyword_1() { return cVitesseKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//wheelengine=[WheelEngine|FQN]
		public Assignment getWheelengineAssignment_3() { return cWheelengineAssignment_3; }
		
		//[WheelEngine|FQN]
		public CrossReference getWheelengineWheelEngineCrossReference_3_0() { return cWheelengineWheelEngineCrossReference_3_0; }
		
		//FQN
		public RuleCall getWheelengineWheelEngineFQNParserRuleCall_3_0_1() { return cWheelengineWheelEngineFQNParserRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }
		
		//right=Expression
		public Assignment getRightAssignment_6() { return cRightAssignment_6; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_6_0() { return cRightExpressionParserRuleCall_6_0; }
	}
	public class BreakMotorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.BreakMotor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBreakKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMotorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEngineAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cEngineEngineCrossReference_3_0 = (CrossReference)cEngineAssignment_3.eContents().get(0);
		private final RuleCall cEngineEngineFQNParserRuleCall_3_0_1 = (RuleCall)cEngineEngineCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//BreakMotor returns BreakMotor:
		//    'break' 'motor' '('engine=[Engine|FQN]')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'break' 'motor' '('engine=[Engine|FQN]')'
		public Group getGroup() { return cGroup; }
		
		//'break'
		public Keyword getBreakKeyword_0() { return cBreakKeyword_0; }
		
		//'motor'
		public Keyword getMotorKeyword_1() { return cMotorKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//engine=[Engine|FQN]
		public Assignment getEngineAssignment_3() { return cEngineAssignment_3; }
		
		//[Engine|FQN]
		public CrossReference getEngineEngineCrossReference_3_0() { return cEngineEngineCrossReference_3_0; }
		
		//FQN
		public RuleCall getEngineEngineFQNParserRuleCall_3_0_1() { return cEngineEngineFQNParserRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class PositionOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.PositionOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDegresKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMotorizedarmengineAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cMotorizedarmengineMotorizedArmEngineCrossReference_3_0 = (CrossReference)cMotorizedarmengineAssignment_3.eContents().get(0);
		private final RuleCall cMotorizedarmengineMotorizedArmEngineFQNParserRuleCall_3_0_1 = (RuleCall)cMotorizedarmengineMotorizedArmEngineCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRightAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRightExpressionParserRuleCall_6_0 = (RuleCall)cRightAssignment_6.eContents().get(0);
		
		//PositionOperation returns PositionOperation:
		//    'set' 'degres''('motorizedarmengine=[MotorizedArmEngine|FQN]')'
		//    '='
		//    right=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'set' 'degres''('motorizedarmengine=[MotorizedArmEngine|FQN]')'
		//'='
		//right=Expression
		public Group getGroup() { return cGroup; }
		
		//'set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//'degres'
		public Keyword getDegresKeyword_1() { return cDegresKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//motorizedarmengine=[MotorizedArmEngine|FQN]
		public Assignment getMotorizedarmengineAssignment_3() { return cMotorizedarmengineAssignment_3; }
		
		//[MotorizedArmEngine|FQN]
		public CrossReference getMotorizedarmengineMotorizedArmEngineCrossReference_3_0() { return cMotorizedarmengineMotorizedArmEngineCrossReference_3_0; }
		
		//FQN
		public RuleCall getMotorizedarmengineMotorizedArmEngineFQNParserRuleCall_3_0_1() { return cMotorizedarmengineMotorizedArmEngineFQNParserRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }
		
		//right=Expression
		public Assignment getRightAssignment_6() { return cRightAssignment_6; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_6_0() { return cRightExpressionParserRuleCall_6_0; }
	}
	public class ForceOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.ForceOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cStrengthKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPaintballlauncherengineAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cPaintballlauncherenginePaintballLauncherEngineCrossReference_3_0 = (CrossReference)cPaintballlauncherengineAssignment_3.eContents().get(0);
		private final RuleCall cPaintballlauncherenginePaintballLauncherEngineFQNParserRuleCall_3_0_1 = (RuleCall)cPaintballlauncherenginePaintballLauncherEngineCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRightAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRightExpressionParserRuleCall_6_0 = (RuleCall)cRightAssignment_6.eContents().get(0);
		
		//ForceOperation returns ForceOperation:
		//    'set' 'strength''('paintballlauncherengine=[PaintballLauncherEngine|FQN]')'
		//    '='
		//    right=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'set' 'strength''('paintballlauncherengine=[PaintballLauncherEngine|FQN]')'
		//'='
		//right=Expression
		public Group getGroup() { return cGroup; }
		
		//'set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//'strength'
		public Keyword getStrengthKeyword_1() { return cStrengthKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//paintballlauncherengine=[PaintballLauncherEngine|FQN]
		public Assignment getPaintballlauncherengineAssignment_3() { return cPaintballlauncherengineAssignment_3; }
		
		//[PaintballLauncherEngine|FQN]
		public CrossReference getPaintballlauncherenginePaintballLauncherEngineCrossReference_3_0() { return cPaintballlauncherenginePaintballLauncherEngineCrossReference_3_0; }
		
		//FQN
		public RuleCall getPaintballlauncherenginePaintballLauncherEngineFQNParserRuleCall_3_0_1() { return cPaintballlauncherenginePaintballLauncherEngineFQNParserRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }
		
		//right=Expression
		public Assignment getRightAssignment_6() { return cRightAssignment_6; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_6_0() { return cRightExpressionParserRuleCall_6_0; }
	}
	public class ColorOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.ColorOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColorsensorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cColorsensorColorSensorCrossReference_3_0 = (CrossReference)cColorsensorAssignment_3.eContents().get(0);
		private final RuleCall cColorsensorColorSensorFQNParserRuleCall_3_0_1 = (RuleCall)cColorsensorColorSensorCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ColorOperation returns ColorOperation:
		//    'get''color''('colorsensor=[ColorSensor|FQN]')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'get''color''('colorsensor=[ColorSensor|FQN]')'
		public Group getGroup() { return cGroup; }
		
		//'get'
		public Keyword getGetKeyword_0() { return cGetKeyword_0; }
		
		//'color'
		public Keyword getColorKeyword_1() { return cColorKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//colorsensor=[ColorSensor|FQN]
		public Assignment getColorsensorAssignment_3() { return cColorsensorAssignment_3; }
		
		//[ColorSensor|FQN]
		public CrossReference getColorsensorColorSensorCrossReference_3_0() { return cColorsensorColorSensorCrossReference_3_0; }
		
		//FQN
		public RuleCall getColorsensorColorSensorFQNParserRuleCall_3_0_1() { return cColorsensorColorSensorFQNParserRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class IntensityOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.IntensityOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIntensityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColorsensorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cColorsensorColorSensorCrossReference_3_0 = (CrossReference)cColorsensorAssignment_3.eContents().get(0);
		private final RuleCall cColorsensorColorSensorFQNParserRuleCall_3_0_1 = (RuleCall)cColorsensorColorSensorCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IntensityOperation returns IntensityOperation:
		//    'get''intensity''('colorsensor=[ColorSensor|FQN]')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'get''intensity''('colorsensor=[ColorSensor|FQN]')'
		public Group getGroup() { return cGroup; }
		
		//'get'
		public Keyword getGetKeyword_0() { return cGetKeyword_0; }
		
		//'intensity'
		public Keyword getIntensityKeyword_1() { return cIntensityKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//colorsensor=[ColorSensor|FQN]
		public Assignment getColorsensorAssignment_3() { return cColorsensorAssignment_3; }
		
		//[ColorSensor|FQN]
		public CrossReference getColorsensorColorSensorCrossReference_3_0() { return cColorsensorColorSensorCrossReference_3_0; }
		
		//FQN
		public RuleCall getColorsensorColorSensorFQNParserRuleCall_3_0_1() { return cColorsensorColorSensorFQNParserRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class RangeOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.RangeOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLasersensorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cLasersensorLaserSensorCrossReference_3_0 = (CrossReference)cLasersensorAssignment_3.eContents().get(0);
		private final RuleCall cLasersensorLaserSensorFQNParserRuleCall_3_0_1 = (RuleCall)cLasersensorLaserSensorCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RangeOperation returns RangeOperation:
		//    'get''range''('lasersensor=[LaserSensor|FQN]')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'get''range''('lasersensor=[LaserSensor|FQN]')'
		public Group getGroup() { return cGroup; }
		
		//'get'
		public Keyword getGetKeyword_0() { return cGetKeyword_0; }
		
		//'range'
		public Keyword getRangeKeyword_1() { return cRangeKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//lasersensor=[LaserSensor|FQN]
		public Assignment getLasersensorAssignment_3() { return cLasersensorAssignment_3; }
		
		//[LaserSensor|FQN]
		public CrossReference getLasersensorLaserSensorCrossReference_3_0() { return cLasersensorLaserSensorCrossReference_3_0; }
		
		//FQN
		public RuleCall getLasersensorLaserSensorFQNParserRuleCall_3_0_1() { return cLasersensorLaserSensorFQNParserRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class XGPSOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.XGPSOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cXKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGpssensorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cGpssensorGPSSensorCrossReference_3_0 = (CrossReference)cGpssensorAssignment_3.eContents().get(0);
		private final RuleCall cGpssensorGPSSensorFQNParserRuleCall_3_0_1 = (RuleCall)cGpssensorGPSSensorCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//XGPSOperation returns XGPSOperation:
		//    'get''x''('gpssensor=[GPSSensor|FQN]')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'get''x''('gpssensor=[GPSSensor|FQN]')'
		public Group getGroup() { return cGroup; }
		
		//'get'
		public Keyword getGetKeyword_0() { return cGetKeyword_0; }
		
		//'x'
		public Keyword getXKeyword_1() { return cXKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//gpssensor=[GPSSensor|FQN]
		public Assignment getGpssensorAssignment_3() { return cGpssensorAssignment_3; }
		
		//[GPSSensor|FQN]
		public CrossReference getGpssensorGPSSensorCrossReference_3_0() { return cGpssensorGPSSensorCrossReference_3_0; }
		
		//FQN
		public RuleCall getGpssensorGPSSensorFQNParserRuleCall_3_0_1() { return cGpssensorGPSSensorFQNParserRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class YGPSOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.YGPSOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cYKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGpssensorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cGpssensorGPSSensorCrossReference_3_0 = (CrossReference)cGpssensorAssignment_3.eContents().get(0);
		private final RuleCall cGpssensorGPSSensorFQNParserRuleCall_3_0_1 = (RuleCall)cGpssensorGPSSensorCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//YGPSOperation returns YGPSOperation:
		//    'get''y''('gpssensor=[GPSSensor|FQN]')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'get''y''('gpssensor=[GPSSensor|FQN]')'
		public Group getGroup() { return cGroup; }
		
		//'get'
		public Keyword getGetKeyword_0() { return cGetKeyword_0; }
		
		//'y'
		public Keyword getYKeyword_1() { return cYKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//gpssensor=[GPSSensor|FQN]
		public Assignment getGpssensorAssignment_3() { return cGpssensorAssignment_3; }
		
		//[GPSSensor|FQN]
		public CrossReference getGpssensorGPSSensorCrossReference_3_0() { return cGpssensorGPSSensorCrossReference_3_0; }
		
		//FQN
		public RuleCall getGpssensorGPSSensorFQNParserRuleCall_3_0_1() { return cGpssensorGPSSensorFQNParserRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AngleOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.AngleOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAngleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGyrosensorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cGyrosensorGyroSensorCrossReference_3_0 = (CrossReference)cGyrosensorAssignment_3.eContents().get(0);
		private final RuleCall cGyrosensorGyroSensorFQNParserRuleCall_3_0_1 = (RuleCall)cGyrosensorGyroSensorCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AngleOperation returns AngleOperation:
		//    'get''angle''('gyrosensor=[GyroSensor|FQN]')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'get''angle''('gyrosensor=[GyroSensor|FQN]')'
		public Group getGroup() { return cGroup; }
		
		//'get'
		public Keyword getGetKeyword_0() { return cGetKeyword_0; }
		
		//'angle'
		public Keyword getAngleKeyword_1() { return cAngleKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//gyrosensor=[GyroSensor|FQN]
		public Assignment getGyrosensorAssignment_3() { return cGyrosensorAssignment_3; }
		
		//[GyroSensor|FQN]
		public CrossReference getGyrosensorGyroSensorCrossReference_3_0() { return cGyrosensorGyroSensorCrossReference_3_0; }
		
		//FQN
		public RuleCall getGyrosensorGyroSensorFQNParserRuleCall_3_0_1() { return cGyrosensorGyroSensorFQNParserRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DistanceOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.DistanceOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDistanceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUltrasonicsensorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cUltrasonicsensorUltraSonicSensorCrossReference_3_0 = (CrossReference)cUltrasonicsensorAssignment_3.eContents().get(0);
		private final RuleCall cUltrasonicsensorUltraSonicSensorFQNParserRuleCall_3_0_1 = (RuleCall)cUltrasonicsensorUltraSonicSensorCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DistanceOperation returns DistanceOperation:
		//    'get''distance''('ultrasonicsensor=[UltraSonicSensor|FQN]')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'get''distance''('ultrasonicsensor=[UltraSonicSensor|FQN]')'
		public Group getGroup() { return cGroup; }
		
		//'get'
		public Keyword getGetKeyword_0() { return cGetKeyword_0; }
		
		//'distance'
		public Keyword getDistanceKeyword_1() { return cDistanceKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//ultrasonicsensor=[UltraSonicSensor|FQN]
		public Assignment getUltrasonicsensorAssignment_3() { return cUltrasonicsensorAssignment_3; }
		
		//[UltraSonicSensor|FQN]
		public CrossReference getUltrasonicsensorUltraSonicSensorCrossReference_3_0() { return cUltrasonicsensorUltraSonicSensorCrossReference_3_0; }
		
		//FQN
		public RuleCall getUltrasonicsensorUltraSonicSensorFQNParserRuleCall_3_0_1() { return cUltrasonicsensorUltraSonicSensorFQNParserRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.BooleanExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BooleanExpression returns BooleanExpression:
		//    And | Or
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//And | Or
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//Or
		public RuleCall getOrParserRuleCall_1() { return cOrParserRuleCall_1; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAndAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftExpressionParserRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAndKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRightAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRightExpressionParserRuleCall_3_1_0 = (RuleCall)cRightAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//And returns And:
		//    {And}
		//    '('(left=Expression)
		//    ('and' right=Expression)?
		//    ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{And}
		//'('(left=Expression)
		//('and' right=Expression)?
		//')'
		public Group getGroup() { return cGroup; }
		
		//{And}
		public Action getAndAction_0() { return cAndAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(left=Expression)
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_2_0() { return cLeftExpressionParserRuleCall_2_0; }
		
		//('and' right=Expression)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'and'
		public Keyword getAndKeyword_3_0() { return cAndKeyword_3_0; }
		
		//right=Expression
		public Assignment getRightAssignment_3_1() { return cRightAssignment_3_1; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_1_0() { return cRightExpressionParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOrAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftExpressionParserRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOrKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRightAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRightExpressionParserRuleCall_3_1_0 = (RuleCall)cRightAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Or returns Or:
		//    {Or}
		//    '('(left=Expression)
		//    ('or' right=Expression)?
		//    ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Or}
		//'('(left=Expression)
		//('or' right=Expression)?
		//')'
		public Group getGroup() { return cGroup; }
		
		//{Or}
		public Action getOrAction_0() { return cOrAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(left=Expression)
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_2_0() { return cLeftExpressionParserRuleCall_2_0; }
		
		//('or' right=Expression)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'or'
		public Keyword getOrKeyword_3_0() { return cOrKeyword_3_0; }
		
		//right=Expression
		public Assignment getRightAssignment_3_1() { return cRightAssignment_3_1; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_1_0() { return cRightExpressionParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ConditionEtatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.ConditionEtat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionBooleanExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenStatementParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseStatementParserRuleCall_5_1_0 = (RuleCall)cElseAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//ConditionEtat returns ConditionEtat:
		//    'if'
		//        Condition=BooleanExpression '{'
		//            (then+=Statement )*
		//        '}'
		//        ('else{'else+=Statement'}' )?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'if'
		//    Condition=BooleanExpression '{'
		//        (then+=Statement )*
		//    '}'
		//    ('else{'else+=Statement'}' )?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//Condition=BooleanExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//BooleanExpression
		public RuleCall getConditionBooleanExpressionParserRuleCall_1_0() { return cConditionBooleanExpressionParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(then+=Statement )*
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }
		
		//Statement
		public RuleCall getThenStatementParserRuleCall_3_0() { return cThenStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//('else{'else+=Statement'}' )?
		public Group getGroup_5() { return cGroup_5; }
		
		//'else{'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//else+=Statement
		public Assignment getElseAssignment_5_1() { return cElseAssignment_5_1; }
		
		//Statement
		public RuleCall getElseStatementParserRuleCall_5_1_0() { return cElseStatementParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFQNParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    FQN | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//FQN | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FQN
		public RuleCall getFQNParserRuleCall_0() { return cFQNParserRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class WhileLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.WhileLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLoopConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLoopConditionBooleanExpressionParserRuleCall_1_0 = (RuleCall)cLoopConditionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatementParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//WhileLoop returns WhileLoop:
		//    'while'
		//        LoopCondition=BooleanExpression
		//    '{'
		//        (statement+=Statement )*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'while'
		//    LoopCondition=BooleanExpression
		//'{'
		//    (statement+=Statement )*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//LoopCondition=BooleanExpression
		public Assignment getLoopConditionAssignment_1() { return cLoopConditionAssignment_1; }
		
		//BooleanExpression
		public RuleCall getLoopConditionBooleanExpressionParserRuleCall_1_0() { return cLoopConditionBooleanExpressionParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(statement+=Statement )*
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_3_0() { return cStatementStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MethodePrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.MethodePrint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodePrintAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrintKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MethodePrint returns MethodePrint:
		//    {MethodePrint}
		//    'print('
		//    (expression+=Expression)
		//    (',' expression+=Expression)*
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{MethodePrint}
		//'print('
		//(expression+=Expression)
		//(',' expression+=Expression)*
		//')'
		public Group getGroup() { return cGroup; }
		
		//{MethodePrint}
		public Action getMethodePrintAction_0() { return cMethodePrintAction_0; }
		
		//'print('
		public Keyword getPrintKeyword_1() { return cPrintKeyword_1; }
		
		//(expression+=Expression)
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//(',' expression+=Expression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_1_0() { return cExpressionExpressionParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class VariableRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.VariableRef");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_0 = (CrossReference)cVariableAssignment.eContents().get(0);
		private final RuleCall cVariableVariableEStringParserRuleCall_0_1 = (RuleCall)cVariableVariableCrossReference_0.eContents().get(1);
		
		//VariableRef returns VariableRef:
		//    variable=[Variable|EString]
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[Variable|EString]
		public Assignment getVariableAssignment() { return cVariableAssignment; }
		
		//[Variable|EString]
		public CrossReference getVariableVariableCrossReference_0() { return cVariableVariableCrossReference_0; }
		
		//EString
		public RuleCall getVariableVariableEStringParserRuleCall_0_1() { return cVariableVariableEStringParserRuleCall_0_1; }
	}
	public class SubstractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Substraction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Substraction returns Substraction:
		//       '(' left=Expression '-'
		//        right=Expression ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' left=Expression '-'
		// right=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Addition returns Addition:
		//       '(' left=Expression '+'
		//        right=Expression ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' left=Expression '+'
		// right=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Multiplication returns Multiplication:
		//       '(' left=Expression '*'
		//        right=Expression ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' left=Expression '*'
		// right=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Division");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cSolidusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Division returns Division:
		//       '(' left=Expression '/'
		//        right=Expression ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' left=Expression '/'
		// right=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class GTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.GT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GT returns GT:
		//    '(' left=Expression '>'
		//    right=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' left=Expression '>'
		//right=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.LT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LT returns LT:
		//    '(' left=Expression '<'
		//    right=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' left=Expression '<'
		//right=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Equal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Equal returns Equal:
		//    '(' left=Expression '=='
		//    right=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' left=Expression '=='
		//right=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DifferentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Different");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Different returns Different:
		//    '(' left=Expression '!='
		//    right=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' left=Expression '!='
		//right=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_2() { return cExclamationMarkEqualsSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LTorEqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.LTorEqual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LTorEqual returns LTorEqual:
		//    '(' left=Expression '<='
		//    right=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' left=Expression '<='
		//right=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class GTorEqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.GTorEqual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GTorEqual returns GTorEqual:
		//    '(' left=Expression '>='
		//    right=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' left=Expression '>='
		//right=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Expression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_1_0() { return cLeftExpressionParserRuleCall_1_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AssignementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Assignement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssignementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftExpressionParserRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightExpressionParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		
		//Assignement returns Assignement:
		//    {Assignement}
		//    'set' left=Expression
		//    '=' right= Expression
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Assignement}
		//'set' left=Expression
		//'=' right= Expression
		public Group getGroup() { return cGroup; }
		
		//{Assignement}
		public Action getAssignementAction_0() { return cAssignementAction_0; }
		
		//'set'
		public Keyword getSetKeyword_1() { return cSetKeyword_1; }
		
		//left=Expression
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_2_0() { return cLeftExpressionParserRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//right= Expression
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_4_0() { return cRightExpressionParserRuleCall_4_0; }
	}
	public class PlusEqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.PlusEqual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPlusEqualAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftExpressionParserRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightExpressionParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PlusEqual returns PlusEqual:
		//    {PlusEqual}
		//    '('left=Expression
		//    '+=' right= Expression ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{PlusEqual}
		//'('left=Expression
		//'+=' right= Expression ')'
		public Group getGroup() { return cGroup; }
		
		//{PlusEqual}
		public Action getPlusEqualAction_0() { return cPlusEqualAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//left=Expression
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_2_0() { return cLeftExpressionParserRuleCall_2_0; }
		
		//'+='
		public Keyword getPlusSignEqualsSignKeyword_3() { return cPlusSignEqualsSignKeyword_3; }
		
		//right= Expression
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_4_0() { return cRightExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class MinusEqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.MinusEqual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMinusEqualAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftExpressionParserRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightExpressionParserRuleCall_4_0 = (RuleCall)cRightAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MinusEqual returns MinusEqual:
		//    {MinusEqual}
		//    '('left=Expression
		//    '-=' right= Expression ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{MinusEqual}
		//'('left=Expression
		//'-=' right= Expression ')'
		public Group getGroup() { return cGroup; }
		
		//{MinusEqual}
		public Action getMinusEqualAction_0() { return cMinusEqualAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//left=Expression
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }
		
		//Expression
		public RuleCall getLeftExpressionParserRuleCall_2_0() { return cLeftExpressionParserRuleCall_2_0; }
		
		//'-='
		public Keyword getHyphenMinusEqualsSignKeyword_3() { return cHyphenMinusEqualsSignKeyword_3; }
		
		//right= Expression
		public Assignment getRightAssignment_4() { return cRightAssignment_4; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_4_0() { return cRightExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class UnIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.UnInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnIntegerAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsConstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsConstConstKeyword_1_0 = (Keyword)cIsConstAssignment_1.eContents().get(0);
		private final Keyword cIntKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInitialeValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInitialeValueEIntParserRuleCall_4_1_0 = (RuleCall)cInitialeValueAssignment_4_1.eContents().get(0);
		
		//UnInteger returns UnInteger:
		//    {UnInteger}
		//    (isConst?='const')?
		//    'int'
		//    name=EString
		//    ('=' initialeValue=EInt)? ;
		@Override public ParserRule getRule() { return rule; }
		
		//{UnInteger}
		//(isConst?='const')?
		//'int'
		//name=EString
		//('=' initialeValue=EInt)?
		public Group getGroup() { return cGroup; }
		
		//{UnInteger}
		public Action getUnIntegerAction_0() { return cUnIntegerAction_0; }
		
		//(isConst?='const')?
		public Assignment getIsConstAssignment_1() { return cIsConstAssignment_1; }
		
		//'const'
		public Keyword getIsConstConstKeyword_1_0() { return cIsConstConstKeyword_1_0; }
		
		//'int'
		public Keyword getIntKeyword_2() { return cIntKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//('=' initialeValue=EInt)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }
		
		//initialeValue=EInt
		public Assignment getInitialeValueAssignment_4_1() { return cInitialeValueAssignment_4_1; }
		
		//EInt
		public RuleCall getInitialeValueEIntParserRuleCall_4_1_0() { return cInitialeValueEIntParserRuleCall_4_1_0; }
	}
	public class UnDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.UnDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnDoubleAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsConstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsConstConstKeyword_1_0 = (Keyword)cIsConstAssignment_1.eContents().get(0);
		private final Keyword cDoubleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInitialeValue1Assignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInitialeValue1EIntParserRuleCall_4_1_0 = (RuleCall)cInitialeValue1Assignment_4_1.eContents().get(0);
		private final Keyword cFullStopKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cInitialeValue2Assignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cInitialeValue2EIntParserRuleCall_4_3_0 = (RuleCall)cInitialeValue2Assignment_4_3.eContents().get(0);
		
		//UnDouble returns UnDouble:
		//    {UnDouble}
		//    (isConst?='const')?
		//    'double'
		//    name=EString
		//    ('=' initialeValue1=EInt '.' initialeValue2=EInt)? ;
		@Override public ParserRule getRule() { return rule; }
		
		//{UnDouble}
		//(isConst?='const')?
		//'double'
		//name=EString
		//('=' initialeValue1=EInt '.' initialeValue2=EInt)?
		public Group getGroup() { return cGroup; }
		
		//{UnDouble}
		public Action getUnDoubleAction_0() { return cUnDoubleAction_0; }
		
		//(isConst?='const')?
		public Assignment getIsConstAssignment_1() { return cIsConstAssignment_1; }
		
		//'const'
		public Keyword getIsConstConstKeyword_1_0() { return cIsConstConstKeyword_1_0; }
		
		//'double'
		public Keyword getDoubleKeyword_2() { return cDoubleKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//('=' initialeValue1=EInt '.' initialeValue2=EInt)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }
		
		//initialeValue1=EInt
		public Assignment getInitialeValue1Assignment_4_1() { return cInitialeValue1Assignment_4_1; }
		
		//EInt
		public RuleCall getInitialeValue1EIntParserRuleCall_4_1_0() { return cInitialeValue1EIntParserRuleCall_4_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_4_2() { return cFullStopKeyword_4_2; }
		
		//initialeValue2=EInt
		public Assignment getInitialeValue2Assignment_4_3() { return cInitialeValue2Assignment_4_3; }
		
		//EInt
		public RuleCall getInitialeValue2EIntParserRuleCall_4_3_0() { return cInitialeValue2EIntParserRuleCall_4_3_0; }
	}
	public class UnBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.UnBoolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnBooleanAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsConstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsConstConstKeyword_1_0 = (Keyword)cIsConstAssignment_1.eContents().get(0);
		private final Keyword cBoolKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInitialeValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInitialeValueEBooleanParserRuleCall_4_1_0 = (RuleCall)cInitialeValueAssignment_4_1.eContents().get(0);
		
		//UnBoolean returns UnBoolean:
		//    {UnBoolean}
		//    (isConst?='const')?
		//    'bool'
		//    name=EString
		//    ('=' initialeValue=EBoolean)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{UnBoolean}
		//(isConst?='const')?
		//'bool'
		//name=EString
		//('=' initialeValue=EBoolean)?
		public Group getGroup() { return cGroup; }
		
		//{UnBoolean}
		public Action getUnBooleanAction_0() { return cUnBooleanAction_0; }
		
		//(isConst?='const')?
		public Assignment getIsConstAssignment_1() { return cIsConstAssignment_1; }
		
		//'const'
		public Keyword getIsConstConstKeyword_1_0() { return cIsConstConstKeyword_1_0; }
		
		//'bool'
		public Keyword getBoolKeyword_2() { return cBoolKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//('=' initialeValue=EBoolean)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }
		
		//initialeValue=EBoolean
		public Assignment getInitialeValueAssignment_4_1() { return cInitialeValueAssignment_4_1; }
		
		//EBoolean
		public RuleCall getInitialeValueEBooleanParserRuleCall_4_1_0() { return cInitialeValueEBooleanParserRuleCall_4_1_0; }
	}
	public class UnStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.UnString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsConstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsConstConstKeyword_1_0 = (Keyword)cIsConstAssignment_1.eContents().get(0);
		private final Keyword cStringKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInitialeValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInitialeValueSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cInitialeValueAssignment_4_1.eContents().get(0);
		
		//UnString returns UnString:
		//    {UnString}
		//    (isConst?='const')?
		//    'string'
		//    name=EString
		//    ('=' initialeValue=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{UnString}
		//(isConst?='const')?
		//'string'
		//name=EString
		//('=' initialeValue=STRING)?
		public Group getGroup() { return cGroup; }
		
		//{UnString}
		public Action getUnStringAction_0() { return cUnStringAction_0; }
		
		//(isConst?='const')?
		public Assignment getIsConstAssignment_1() { return cIsConstAssignment_1; }
		
		//'const'
		public Keyword getIsConstConstKeyword_1_0() { return cIsConstConstKeyword_1_0; }
		
		//'string'
		public Keyword getStringKeyword_2() { return cStringKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//('=' initialeValue=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }
		
		//initialeValue=STRING
		public Assignment getInitialeValueAssignment_4_1() { return cInitialeValueAssignment_4_1; }
		
		//STRING
		public RuleCall getInitialeValueSTRINGTerminalRuleCall_4_1_0() { return cInitialeValueSTRINGTerminalRuleCall_4_1_0; }
	}
	public class UnColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.UnColor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnColorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIsConstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsConstConstKeyword_1_0 = (Keyword)cIsConstAssignment_1.eContents().get(0);
		private final Keyword cColorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInitialValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInitialValueColorsEnumRuleCall_4_1_0 = (RuleCall)cInitialValueAssignment_4_1.eContents().get(0);
		
		//UnColor returns UnColor:
		//    {UnColor}
		//    (isConst?='const')?
		//    'color'
		//    name=EString
		//    ('=' initialValue =Colors )?;
		@Override public ParserRule getRule() { return rule; }
		
		//{UnColor}
		//(isConst?='const')?
		//'color'
		//name=EString
		//('=' initialValue =Colors )?
		public Group getGroup() { return cGroup; }
		
		//{UnColor}
		public Action getUnColorAction_0() { return cUnColorAction_0; }
		
		//(isConst?='const')?
		public Assignment getIsConstAssignment_1() { return cIsConstAssignment_1; }
		
		//'const'
		public Keyword getIsConstConstKeyword_1_0() { return cIsConstConstKeyword_1_0; }
		
		//'color'
		public Keyword getColorKeyword_2() { return cColorKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//('=' initialValue =Colors )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }
		
		//initialValue =Colors
		public Assignment getInitialValueAssignment_4_1() { return cInitialValueAssignment_4_1; }
		
		//Colors
		public RuleCall getInitialValueColorsEnumRuleCall_4_1_0() { return cInitialValueColorsEnumRuleCall_4_1_0; }
	}
	public class TheDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.TheDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTheDoubleAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValue1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValue1EIntParserRuleCall_1_0 = (RuleCall)cValue1Assignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValue2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValue2EIntParserRuleCall_3_0 = (RuleCall)cValue2Assignment_3.eContents().get(0);
		
		//TheDouble returns TheDouble:
		//    {TheDouble}
		//    value1=EInt '.' value2=EInt ;
		@Override public ParserRule getRule() { return rule; }
		
		//{TheDouble}
		//value1=EInt '.' value2=EInt
		public Group getGroup() { return cGroup; }
		
		//{TheDouble}
		public Action getTheDoubleAction_0() { return cTheDoubleAction_0; }
		
		//value1=EInt
		public Assignment getValue1Assignment_1() { return cValue1Assignment_1; }
		
		//EInt
		public RuleCall getValue1EIntParserRuleCall_1_0() { return cValue1EIntParserRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//value2=EInt
		public Assignment getValue2Assignment_3() { return cValue2Assignment_3; }
		
		//EInt
		public RuleCall getValue2EIntParserRuleCall_3_0() { return cValue2EIntParserRuleCall_3_0; }
	}
	public class TheIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.TheInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTheIntAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEIntParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//TheInt returns TheInt:
		//    {TheInt}
		//    value=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//{TheInt}
		//value=EInt
		public Group getGroup() { return cGroup; }
		
		//{TheInt}
		public Action getTheIntAction_0() { return cTheIntAction_0; }
		
		//value=EInt
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_1_0() { return cValueEIntParserRuleCall_1_0; }
	}
	public class TheBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.TheBoolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTheBooleanAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEBooleanParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//TheBoolean returns TheBoolean:
		//    {TheBoolean}
		//    value=EBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//{TheBoolean}
		//value=EBoolean
		public Group getGroup() { return cGroup; }
		
		//{TheBoolean}
		public Action getTheBooleanAction_0() { return cTheBooleanAction_0; }
		
		//value=EBoolean
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//EBoolean
		public RuleCall getValueEBooleanParserRuleCall_1_0() { return cValueEBooleanParserRuleCall_1_0; }
	}
	public class TheStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.TheString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTheStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//TheString returns TheString:
		//    {TheString}
		//    value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{TheString}
		//value=STRING
		public Group getGroup() { return cGroup; }
		
		//{TheString}
		public Action getTheStringAction_0() { return cTheStringAction_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class TheColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.TheColor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTheColorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueColorsEnumRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//TheColor returns TheColor:
		//    {TheColor}
		//    value=Colors;
		@Override public ParserRule getRule() { return rule; }
		
		//{TheColor}
		//value=Colors
		public Group getGroup() { return cGroup; }
		
		//{TheColor}
		public Action getTheColorAction_0() { return cTheColorAction_0; }
		
		//value=Colors
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Colors
		public RuleCall getValueColorsEnumRuleCall_1_0() { return cValueColorsEnumRuleCall_1_0; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN :
		//    ID('.'ID)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID('.'ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.'ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	public class ColorsElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "langageCompilation.concrete.syntax.LegoLang.Colors");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBlackEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBlackBlackKeyword_0_0 = (Keyword)cBlackEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cWhiteEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cWhiteWhiteKeyword_1_0 = (Keyword)cWhiteEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Colors:
		//black = "black" | white = "white"
		//;
		public EnumRule getRule() { return rule; }
		
		//black = "black" | white = "white"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//black = "black"
		public EnumLiteralDeclaration getBlackEnumLiteralDeclaration_0() { return cBlackEnumLiteralDeclaration_0; }
		
		//"black"
		public Keyword getBlackBlackKeyword_0_0() { return cBlackBlackKeyword_0_0; }
		
		//white = "white"
		public EnumLiteralDeclaration getWhiteEnumLiteralDeclaration_1() { return cWhiteEnumLiteralDeclaration_1; }
		
		//"white"
		public Keyword getWhiteWhiteKeyword_1_0() { return cWhiteWhiteKeyword_1_0; }
	}
	
	private final ProgramElements pProgram;
	private final StatementElements pStatement;
	private final ExpressionElements pExpression;
	private final BinaryOperationElements pBinaryOperation;
	private final VariableElements pVariable;
	private final ComparaisonElements pComparaison;
	private final EngineElements pEngine;
	private final SensorElements pSensor;
	private final PauseElements pPause;
	private final WheelEngineElements pWheelEngine;
	private final MotorizedArmEngineElements pMotorizedArmEngine;
	private final PaintballLauncherEngineElements pPaintballLauncherEngine;
	private final ColorSensorElements pColorSensor;
	private final LaserSensorElements pLaserSensor;
	private final GPSSensorElements pGPSSensor;
	private final GyroSensorElements pGyroSensor;
	private final UltraSonicSensorElements pUltraSonicSensor;
	private final CarElements pCar;
	private final EngineOperationElements pEngineOperation;
	private final SensorOperationElements pSensorOperation;
	private final VitesseOperationElements pVitesseOperation;
	private final BreakMotorElements pBreakMotor;
	private final PositionOperationElements pPositionOperation;
	private final ForceOperationElements pForceOperation;
	private final ColorOperationElements pColorOperation;
	private final IntensityOperationElements pIntensityOperation;
	private final RangeOperationElements pRangeOperation;
	private final XGPSOperationElements pXGPSOperation;
	private final YGPSOperationElements pYGPSOperation;
	private final AngleOperationElements pAngleOperation;
	private final DistanceOperationElements pDistanceOperation;
	private final BooleanExpressionElements pBooleanExpression;
	private final AndElements pAnd;
	private final OrElements pOr;
	private final ConditionEtatElements pConditionEtat;
	private final EStringElements pEString;
	private final WhileLoopElements pWhileLoop;
	private final MethodePrintElements pMethodePrint;
	private final VariableRefElements pVariableRef;
	private final SubstractionElements pSubstraction;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final DivisionElements pDivision;
	private final GTElements pGT;
	private final LTElements pLT;
	private final EqualElements pEqual;
	private final DifferentElements pDifferent;
	private final LTorEqualElements pLTorEqual;
	private final GTorEqualElements pGTorEqual;
	private final AssignementElements pAssignement;
	private final PlusEqualElements pPlusEqual;
	private final MinusEqualElements pMinusEqual;
	private final EBooleanElements pEBoolean;
	private final UnIntegerElements pUnInteger;
	private final UnDoubleElements pUnDouble;
	private final UnBooleanElements pUnBoolean;
	private final UnStringElements pUnString;
	private final UnColorElements pUnColor;
	private final TheDoubleElements pTheDouble;
	private final TheIntElements pTheInt;
	private final TheBooleanElements pTheBoolean;
	private final TheStringElements pTheString;
	private final TheColorElements pTheColor;
	private final ColorsElements eColors;
	private final FQNElements pFQN;
	private final EIntElements pEInt;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LegoLangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pStatement = new StatementElements();
		this.pExpression = new ExpressionElements();
		this.pBinaryOperation = new BinaryOperationElements();
		this.pVariable = new VariableElements();
		this.pComparaison = new ComparaisonElements();
		this.pEngine = new EngineElements();
		this.pSensor = new SensorElements();
		this.pPause = new PauseElements();
		this.pWheelEngine = new WheelEngineElements();
		this.pMotorizedArmEngine = new MotorizedArmEngineElements();
		this.pPaintballLauncherEngine = new PaintballLauncherEngineElements();
		this.pColorSensor = new ColorSensorElements();
		this.pLaserSensor = new LaserSensorElements();
		this.pGPSSensor = new GPSSensorElements();
		this.pGyroSensor = new GyroSensorElements();
		this.pUltraSonicSensor = new UltraSonicSensorElements();
		this.pCar = new CarElements();
		this.pEngineOperation = new EngineOperationElements();
		this.pSensorOperation = new SensorOperationElements();
		this.pVitesseOperation = new VitesseOperationElements();
		this.pBreakMotor = new BreakMotorElements();
		this.pPositionOperation = new PositionOperationElements();
		this.pForceOperation = new ForceOperationElements();
		this.pColorOperation = new ColorOperationElements();
		this.pIntensityOperation = new IntensityOperationElements();
		this.pRangeOperation = new RangeOperationElements();
		this.pXGPSOperation = new XGPSOperationElements();
		this.pYGPSOperation = new YGPSOperationElements();
		this.pAngleOperation = new AngleOperationElements();
		this.pDistanceOperation = new DistanceOperationElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pAnd = new AndElements();
		this.pOr = new OrElements();
		this.pConditionEtat = new ConditionEtatElements();
		this.pEString = new EStringElements();
		this.pWhileLoop = new WhileLoopElements();
		this.pMethodePrint = new MethodePrintElements();
		this.pVariableRef = new VariableRefElements();
		this.pSubstraction = new SubstractionElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pDivision = new DivisionElements();
		this.pGT = new GTElements();
		this.pLT = new LTElements();
		this.pEqual = new EqualElements();
		this.pDifferent = new DifferentElements();
		this.pLTorEqual = new LTorEqualElements();
		this.pGTorEqual = new GTorEqualElements();
		this.pAssignement = new AssignementElements();
		this.pPlusEqual = new PlusEqualElements();
		this.pMinusEqual = new MinusEqualElements();
		this.pEBoolean = new EBooleanElements();
		this.pUnInteger = new UnIntegerElements();
		this.pUnDouble = new UnDoubleElements();
		this.pUnBoolean = new UnBooleanElements();
		this.pUnString = new UnStringElements();
		this.pUnColor = new UnColorElements();
		this.pTheDouble = new TheDoubleElements();
		this.pTheInt = new TheIntElements();
		this.pTheBoolean = new TheBooleanElements();
		this.pTheString = new TheStringElements();
		this.pTheColor = new TheColorElements();
		this.eColors = new ColorsElements();
		this.pFQN = new FQNElements();
		this.pEInt = new EIntElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("langageCompilation.concrete.syntax.LegoLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program returns Program:
	//    {Program}
	//    'Program'
	//    name=EString
	//    '{'
	//        (statement+=Statement)*  (';')?
	//    '}';
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Statement returns Statement:
	//    WhileLoop | Variable | Expression | ConditionEtat | MethodePrint | Car | Sensor | Engine | Pause;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Expression returns Expression:
	//    VariableRef | BinaryOperation | TheString | TheColor | TheDouble | TheInt | TheBoolean | EngineOperation | BreakMotor | SensorOperation | BooleanExpression ;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//BinaryOperation returns BinaryOperation:
	//    Substraction | Comparaison | Assignement | Division | Multiplication | Addition | MinusEqual | PlusEqual;
	public BinaryOperationElements getBinaryOperationAccess() {
		return pBinaryOperation;
	}
	
	public ParserRule getBinaryOperationRule() {
		return getBinaryOperationAccess().getRule();
	}
	
	//Variable returns Variable:
	//    UnInteger | UnString | UnBoolean | UnDouble | UnColor;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Comparaison returns Comparaison:
	//      GT | Equal | LT | Different | GTorEqual | LTorEqual ;
	public ComparaisonElements getComparaisonAccess() {
		return pComparaison;
	}
	
	public ParserRule getComparaisonRule() {
		return getComparaisonAccess().getRule();
	}
	
	//Engine returns Engine:
	//    WheelEngine | MotorizedArmEngine | PaintballLauncherEngine;
	public EngineElements getEngineAccess() {
		return pEngine;
	}
	
	public ParserRule getEngineRule() {
		return getEngineAccess().getRule();
	}
	
	//Sensor returns Sensor:
	//    LaserSensor | ColorSensor | UltraSonicSensor | GyroSensor | GPSSensor;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//Pause returns Pause:
	//    'stop''for' expression=Expression
	//;
	public PauseElements getPauseAccess() {
		return pPause;
	}
	
	public ParserRule getPauseRule() {
		return getPauseAccess().getRule();
	}
	
	//WheelEngine returns WheelEngine:
	//    'WheelEngine'
	//    name=EString
	//    'on'
	//    position=EString
	//;
	public WheelEngineElements getWheelEngineAccess() {
		return pWheelEngine;
	}
	
	public ParserRule getWheelEngineRule() {
		return getWheelEngineAccess().getRule();
	}
	
	//MotorizedArmEngine returns MotorizedArmEngine:
	//    'MotorizedArmEngine'
	//    name=EString
	//    'on'
	//    position=EString
	//;
	public MotorizedArmEngineElements getMotorizedArmEngineAccess() {
		return pMotorizedArmEngine;
	}
	
	public ParserRule getMotorizedArmEngineRule() {
		return getMotorizedArmEngineAccess().getRule();
	}
	
	//PaintballLauncherEngine returns PaintballLauncherEngine:
	//    'PaintballLauncherEngine'
	//    name=EString
	//    'on'
	//    position=EString
	//;
	public PaintballLauncherEngineElements getPaintballLauncherEngineAccess() {
		return pPaintballLauncherEngine;
	}
	
	public ParserRule getPaintballLauncherEngineRule() {
		return getPaintballLauncherEngineAccess().getRule();
	}
	
	//ColorSensor returns ColorSensor:
	//    'ColorSensor'
	//    name=EString
	//    'on'
	//    position=EInt
	//;
	public ColorSensorElements getColorSensorAccess() {
		return pColorSensor;
	}
	
	public ParserRule getColorSensorRule() {
		return getColorSensorAccess().getRule();
	}
	
	//LaserSensor returns LaserSensor:
	//    'LaserSensor'
	//    name=EString
	//    'on'
	//    position=EInt
	//;
	public LaserSensorElements getLaserSensorAccess() {
		return pLaserSensor;
	}
	
	public ParserRule getLaserSensorRule() {
		return getLaserSensorAccess().getRule();
	}
	
	//GPSSensor returns GPSSensor:
	//    'GPSSensor'
	//    name=EString
	//    'on'
	//    position=EInt
	//;
	public GPSSensorElements getGPSSensorAccess() {
		return pGPSSensor;
	}
	
	public ParserRule getGPSSensorRule() {
		return getGPSSensorAccess().getRule();
	}
	
	//GyroSensor returns GyroSensor:
	//    'GyroSensor'
	//    name=EString
	//    'on'
	//    position=EInt
	//;
	public GyroSensorElements getGyroSensorAccess() {
		return pGyroSensor;
	}
	
	public ParserRule getGyroSensorRule() {
		return getGyroSensorAccess().getRule();
	}
	
	//UltraSonicSensor returns UltraSonicSensor:
	//    'UltraSonicSensor'
	//    name=EString
	//    'on'
	//    position=EInt
	//;
	public UltraSonicSensorElements getUltraSonicSensorAccess() {
		return pUltraSonicSensor;
	}
	
	public ParserRule getUltraSonicSensorRule() {
		return getUltraSonicSensorAccess().getRule();
	}
	
	//Car returns Car:
	//    'Car'
	//    name=EString
	//    '{'
	//        (sensor+=Sensor)*
	//        (engine+=Engine)*
	//    '}'
	//;
	public CarElements getCarAccess() {
		return pCar;
	}
	
	public ParserRule getCarRule() {
		return getCarAccess().getRule();
	}
	
	//EngineOperation returns EngineOperation:
	//     VitesseOperation | PositionOperation | ForceOperation
	//;
	public EngineOperationElements getEngineOperationAccess() {
		return pEngineOperation;
	}
	
	public ParserRule getEngineOperationRule() {
		return getEngineOperationAccess().getRule();
	}
	
	//SensorOperation returns SensorOperation:
	//    RangeOperation | ColorOperation | IntensityOperation | XGPSOperation | YGPSOperation | AngleOperation | DistanceOperation ;
	public SensorOperationElements getSensorOperationAccess() {
		return pSensorOperation;
	}
	
	public ParserRule getSensorOperationRule() {
		return getSensorOperationAccess().getRule();
	}
	
	//VitesseOperation returns VitesseOperation:
	//    'set' 'vitesse''('wheelengine=[WheelEngine|FQN]')'
	//    '='
	//    right=Expression
	//;
	public VitesseOperationElements getVitesseOperationAccess() {
		return pVitesseOperation;
	}
	
	public ParserRule getVitesseOperationRule() {
		return getVitesseOperationAccess().getRule();
	}
	
	//BreakMotor returns BreakMotor:
	//    'break' 'motor' '('engine=[Engine|FQN]')'
	//;
	public BreakMotorElements getBreakMotorAccess() {
		return pBreakMotor;
	}
	
	public ParserRule getBreakMotorRule() {
		return getBreakMotorAccess().getRule();
	}
	
	//PositionOperation returns PositionOperation:
	//    'set' 'degres''('motorizedarmengine=[MotorizedArmEngine|FQN]')'
	//    '='
	//    right=Expression
	//;
	public PositionOperationElements getPositionOperationAccess() {
		return pPositionOperation;
	}
	
	public ParserRule getPositionOperationRule() {
		return getPositionOperationAccess().getRule();
	}
	
	//ForceOperation returns ForceOperation:
	//    'set' 'strength''('paintballlauncherengine=[PaintballLauncherEngine|FQN]')'
	//    '='
	//    right=Expression
	//;
	public ForceOperationElements getForceOperationAccess() {
		return pForceOperation;
	}
	
	public ParserRule getForceOperationRule() {
		return getForceOperationAccess().getRule();
	}
	
	//ColorOperation returns ColorOperation:
	//    'get''color''('colorsensor=[ColorSensor|FQN]')'
	//;
	public ColorOperationElements getColorOperationAccess() {
		return pColorOperation;
	}
	
	public ParserRule getColorOperationRule() {
		return getColorOperationAccess().getRule();
	}
	
	//IntensityOperation returns IntensityOperation:
	//    'get''intensity''('colorsensor=[ColorSensor|FQN]')'
	//;
	public IntensityOperationElements getIntensityOperationAccess() {
		return pIntensityOperation;
	}
	
	public ParserRule getIntensityOperationRule() {
		return getIntensityOperationAccess().getRule();
	}
	
	//RangeOperation returns RangeOperation:
	//    'get''range''('lasersensor=[LaserSensor|FQN]')'
	//;
	public RangeOperationElements getRangeOperationAccess() {
		return pRangeOperation;
	}
	
	public ParserRule getRangeOperationRule() {
		return getRangeOperationAccess().getRule();
	}
	
	//XGPSOperation returns XGPSOperation:
	//    'get''x''('gpssensor=[GPSSensor|FQN]')'
	//;
	public XGPSOperationElements getXGPSOperationAccess() {
		return pXGPSOperation;
	}
	
	public ParserRule getXGPSOperationRule() {
		return getXGPSOperationAccess().getRule();
	}
	
	//YGPSOperation returns YGPSOperation:
	//    'get''y''('gpssensor=[GPSSensor|FQN]')'
	//;
	public YGPSOperationElements getYGPSOperationAccess() {
		return pYGPSOperation;
	}
	
	public ParserRule getYGPSOperationRule() {
		return getYGPSOperationAccess().getRule();
	}
	
	//AngleOperation returns AngleOperation:
	//    'get''angle''('gyrosensor=[GyroSensor|FQN]')'
	//;
	public AngleOperationElements getAngleOperationAccess() {
		return pAngleOperation;
	}
	
	public ParserRule getAngleOperationRule() {
		return getAngleOperationAccess().getRule();
	}
	
	//DistanceOperation returns DistanceOperation:
	//    'get''distance''('ultrasonicsensor=[UltraSonicSensor|FQN]')'
	//;
	public DistanceOperationElements getDistanceOperationAccess() {
		return pDistanceOperation;
	}
	
	public ParserRule getDistanceOperationRule() {
		return getDistanceOperationAccess().getRule();
	}
	
	//BooleanExpression returns BooleanExpression:
	//    And | Or
	//;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	//And returns And:
	//    {And}
	//    '('(left=Expression)
	//    ('and' right=Expression)?
	//    ')'
	//;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Or returns Or:
	//    {Or}
	//    '('(left=Expression)
	//    ('or' right=Expression)?
	//    ')'
	//;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//ConditionEtat returns ConditionEtat:
	//    'if'
	//        Condition=BooleanExpression '{'
	//            (then+=Statement )*
	//        '}'
	//        ('else{'else+=Statement'}' )?
	//    ;
	public ConditionEtatElements getConditionEtatAccess() {
		return pConditionEtat;
	}
	
	public ParserRule getConditionEtatRule() {
		return getConditionEtatAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    FQN | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//WhileLoop returns WhileLoop:
	//    'while'
	//        LoopCondition=BooleanExpression
	//    '{'
	//        (statement+=Statement )*
	//    '}';
	public WhileLoopElements getWhileLoopAccess() {
		return pWhileLoop;
	}
	
	public ParserRule getWhileLoopRule() {
		return getWhileLoopAccess().getRule();
	}
	
	//MethodePrint returns MethodePrint:
	//    {MethodePrint}
	//    'print('
	//    (expression+=Expression)
	//    (',' expression+=Expression)*
	//    ')';
	public MethodePrintElements getMethodePrintAccess() {
		return pMethodePrint;
	}
	
	public ParserRule getMethodePrintRule() {
		return getMethodePrintAccess().getRule();
	}
	
	//VariableRef returns VariableRef:
	//    variable=[Variable|EString]
	//    ;
	public VariableRefElements getVariableRefAccess() {
		return pVariableRef;
	}
	
	public ParserRule getVariableRefRule() {
		return getVariableRefAccess().getRule();
	}
	
	//Substraction returns Substraction:
	//       '(' left=Expression '-'
	//        right=Expression ')'
	//    ;
	public SubstractionElements getSubstractionAccess() {
		return pSubstraction;
	}
	
	public ParserRule getSubstractionRule() {
		return getSubstractionAccess().getRule();
	}
	
	//Addition returns Addition:
	//       '(' left=Expression '+'
	//        right=Expression ')'
	//    ;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication returns Multiplication:
	//       '(' left=Expression '*'
	//        right=Expression ')'
	//    ;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Division returns Division:
	//       '(' left=Expression '/'
	//        right=Expression ')'
	//    ;
	public DivisionElements getDivisionAccess() {
		return pDivision;
	}
	
	public ParserRule getDivisionRule() {
		return getDivisionAccess().getRule();
	}
	
	//GT returns GT:
	//    '(' left=Expression '>'
	//    right=Expression ')';
	public GTElements getGTAccess() {
		return pGT;
	}
	
	public ParserRule getGTRule() {
		return getGTAccess().getRule();
	}
	
	//LT returns LT:
	//    '(' left=Expression '<'
	//    right=Expression ')';
	public LTElements getLTAccess() {
		return pLT;
	}
	
	public ParserRule getLTRule() {
		return getLTAccess().getRule();
	}
	
	//Equal returns Equal:
	//    '(' left=Expression '=='
	//    right=Expression ')';
	public EqualElements getEqualAccess() {
		return pEqual;
	}
	
	public ParserRule getEqualRule() {
		return getEqualAccess().getRule();
	}
	
	//Different returns Different:
	//    '(' left=Expression '!='
	//    right=Expression ')';
	public DifferentElements getDifferentAccess() {
		return pDifferent;
	}
	
	public ParserRule getDifferentRule() {
		return getDifferentAccess().getRule();
	}
	
	//LTorEqual returns LTorEqual:
	//    '(' left=Expression '<='
	//    right=Expression ')';
	public LTorEqualElements getLTorEqualAccess() {
		return pLTorEqual;
	}
	
	public ParserRule getLTorEqualRule() {
		return getLTorEqualAccess().getRule();
	}
	
	//GTorEqual returns GTorEqual:
	//    '(' left=Expression '>='
	//    right=Expression ')';
	public GTorEqualElements getGTorEqualAccess() {
		return pGTorEqual;
	}
	
	public ParserRule getGTorEqualRule() {
		return getGTorEqualAccess().getRule();
	}
	
	//Assignement returns Assignement:
	//    {Assignement}
	//    'set' left=Expression
	//    '=' right= Expression
	//    ;
	public AssignementElements getAssignementAccess() {
		return pAssignement;
	}
	
	public ParserRule getAssignementRule() {
		return getAssignementAccess().getRule();
	}
	
	//PlusEqual returns PlusEqual:
	//    {PlusEqual}
	//    '('left=Expression
	//    '+=' right= Expression ')'
	//    ;
	public PlusEqualElements getPlusEqualAccess() {
		return pPlusEqual;
	}
	
	public ParserRule getPlusEqualRule() {
		return getPlusEqualAccess().getRule();
	}
	
	//MinusEqual returns MinusEqual:
	//    {MinusEqual}
	//    '('left=Expression
	//    '-=' right= Expression ')'
	//    ;
	public MinusEqualElements getMinusEqualAccess() {
		return pMinusEqual;
	}
	
	public ParserRule getMinusEqualRule() {
		return getMinusEqualAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//UnInteger returns UnInteger:
	//    {UnInteger}
	//    (isConst?='const')?
	//    'int'
	//    name=EString
	//    ('=' initialeValue=EInt)? ;
	public UnIntegerElements getUnIntegerAccess() {
		return pUnInteger;
	}
	
	public ParserRule getUnIntegerRule() {
		return getUnIntegerAccess().getRule();
	}
	
	//UnDouble returns UnDouble:
	//    {UnDouble}
	//    (isConst?='const')?
	//    'double'
	//    name=EString
	//    ('=' initialeValue1=EInt '.' initialeValue2=EInt)? ;
	public UnDoubleElements getUnDoubleAccess() {
		return pUnDouble;
	}
	
	public ParserRule getUnDoubleRule() {
		return getUnDoubleAccess().getRule();
	}
	
	//UnBoolean returns UnBoolean:
	//    {UnBoolean}
	//    (isConst?='const')?
	//    'bool'
	//    name=EString
	//    ('=' initialeValue=EBoolean)?;
	public UnBooleanElements getUnBooleanAccess() {
		return pUnBoolean;
	}
	
	public ParserRule getUnBooleanRule() {
		return getUnBooleanAccess().getRule();
	}
	
	//UnString returns UnString:
	//    {UnString}
	//    (isConst?='const')?
	//    'string'
	//    name=EString
	//    ('=' initialeValue=STRING)?;
	public UnStringElements getUnStringAccess() {
		return pUnString;
	}
	
	public ParserRule getUnStringRule() {
		return getUnStringAccess().getRule();
	}
	
	//UnColor returns UnColor:
	//    {UnColor}
	//    (isConst?='const')?
	//    'color'
	//    name=EString
	//    ('=' initialValue =Colors )?;
	public UnColorElements getUnColorAccess() {
		return pUnColor;
	}
	
	public ParserRule getUnColorRule() {
		return getUnColorAccess().getRule();
	}
	
	//TheDouble returns TheDouble:
	//    {TheDouble}
	//    value1=EInt '.' value2=EInt ;
	public TheDoubleElements getTheDoubleAccess() {
		return pTheDouble;
	}
	
	public ParserRule getTheDoubleRule() {
		return getTheDoubleAccess().getRule();
	}
	
	//TheInt returns TheInt:
	//    {TheInt}
	//    value=EInt;
	public TheIntElements getTheIntAccess() {
		return pTheInt;
	}
	
	public ParserRule getTheIntRule() {
		return getTheIntAccess().getRule();
	}
	
	//TheBoolean returns TheBoolean:
	//    {TheBoolean}
	//    value=EBoolean;
	public TheBooleanElements getTheBooleanAccess() {
		return pTheBoolean;
	}
	
	public ParserRule getTheBooleanRule() {
		return getTheBooleanAccess().getRule();
	}
	
	//TheString returns TheString:
	//    {TheString}
	//    value=STRING;
	public TheStringElements getTheStringAccess() {
		return pTheString;
	}
	
	public ParserRule getTheStringRule() {
		return getTheStringAccess().getRule();
	}
	
	//TheColor returns TheColor:
	//    {TheColor}
	//    value=Colors;
	public TheColorElements getTheColorAccess() {
		return pTheColor;
	}
	
	public ParserRule getTheColorRule() {
		return getTheColorAccess().getRule();
	}
	
	//enum Colors:
	//black = "black" | white = "white"
	//;
	public ColorsElements getColorsAccess() {
		return eColors;
	}
	
	public EnumRule getColorsRule() {
		return getColorsAccess().getRule();
	}
	
	//FQN :
	//    ID('.'ID)*
	//;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
