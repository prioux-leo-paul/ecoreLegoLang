/**
 * generated by Xtext 2.25.0
 */
package langageCompilation.concrete.syntax.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import langageCompilation.BooleanExpression;
import langageCompilation.Program;
import langageCompilation.Statement;
import langageCompilation.WhileLoop;
import langageCompilation.concrete.syntax.services.LegoLangGrammarAccess;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class LegoLangFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private LegoLangGrammarAccess _legoLangGrammarAccess;
  
  protected void _format(final Program program, @Extension final IFormattableDocument document) {
    EList<Statement> _statement = program.getStatement();
    for (final Statement statement : _statement) {
      document.<Statement>format(statement);
    }
  }
  
  protected void _format(final WhileLoop whileLoop, @Extension final IFormattableDocument document) {
    EList<Statement> _statement = whileLoop.getStatement();
    for (final Statement statement : _statement) {
      document.<Statement>format(statement);
    }
    document.<BooleanExpression>format(whileLoop.getLoopCondition());
  }
  
  public void format(final Object whileLoop, final IFormattableDocument document) {
    if (whileLoop instanceof WhileLoop) {
      _format((WhileLoop)whileLoop, document);
      return;
    } else if (whileLoop instanceof XtextResource) {
      _format((XtextResource)whileLoop, document);
      return;
    } else if (whileLoop instanceof Program) {
      _format((Program)whileLoop, document);
      return;
    } else if (whileLoop instanceof EObject) {
      _format((EObject)whileLoop, document);
      return;
    } else if (whileLoop == null) {
      _format((Void)null, document);
      return;
    } else if (whileLoop != null) {
      _format(whileLoop, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(whileLoop, document).toString());
    }
  }
}
