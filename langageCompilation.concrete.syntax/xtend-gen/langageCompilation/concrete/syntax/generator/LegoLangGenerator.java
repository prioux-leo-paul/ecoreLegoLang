/**
 * generated by Xtext 2.25.0
 */
package langageCompilation.concrete.syntax.generator;

import langageCompilation.Addition;
import langageCompilation.And;
import langageCompilation.AngleOperation;
import langageCompilation.Assignement;
import langageCompilation.BinaryOperation;
import langageCompilation.BooleanExpression;
import langageCompilation.BreakMotor;
import langageCompilation.Car;
import langageCompilation.ColorOperation;
import langageCompilation.ColorSensor;
import langageCompilation.Colors;
import langageCompilation.Comparaison;
import langageCompilation.ConditionEtat;
import langageCompilation.Different;
import langageCompilation.DistanceOperation;
import langageCompilation.Division;
import langageCompilation.Engine;
import langageCompilation.EngineOperation;
import langageCompilation.Equal;
import langageCompilation.Expression;
import langageCompilation.ForceOperation;
import langageCompilation.GPSSensor;
import langageCompilation.GT;
import langageCompilation.GTorEqual;
import langageCompilation.GyroSensor;
import langageCompilation.IntensityOperation;
import langageCompilation.LT;
import langageCompilation.LTorEqual;
import langageCompilation.LaserSensor;
import langageCompilation.Loop;
import langageCompilation.MethodePrint;
import langageCompilation.MinusEqual;
import langageCompilation.MotorizedArmEngine;
import langageCompilation.Multiplication;
import langageCompilation.Or;
import langageCompilation.PaintballLauncherEngine;
import langageCompilation.PlusEqual;
import langageCompilation.PositionOperation;
import langageCompilation.Program;
import langageCompilation.RangeOperation;
import langageCompilation.Sensor;
import langageCompilation.SensorOperation;
import langageCompilation.Statement;
import langageCompilation.Substraction;
import langageCompilation.TheBoolean;
import langageCompilation.TheColor;
import langageCompilation.TheDouble;
import langageCompilation.TheInt;
import langageCompilation.TheString;
import langageCompilation.UltraSonicSensor;
import langageCompilation.UnBoolean;
import langageCompilation.UnColor;
import langageCompilation.UnDouble;
import langageCompilation.UnInteger;
import langageCompilation.UnString;
import langageCompilation.Variable;
import langageCompilation.VariableRef;
import langageCompilation.VitesseOperation;
import langageCompilation.WheelEngine;
import langageCompilation.WhileLoop;
import langageCompilation.XGPSOperation;
import langageCompilation.YGPSOperation;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class LegoLangGenerator extends AbstractGenerator {
  private int nbTab = 0;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IteratorExtensions.<EObject>head(resource.getAllContents());
    Program prog = ((Program) _head);
    String fileContent = "";
    EList<Statement> _statement = prog.getStatement();
    for (final Statement v : _statement) {
      {
        String _fileContent = fileContent;
        String _donneTab = this.donneTab(this.nbTab);
        String _statementToPython = this.statementToPython(v);
        String _plus = (_donneTab + _statementToPython);
        fileContent = (_fileContent + _plus);
        String _fileContent_1 = fileContent;
        fileContent = (_fileContent_1 + "\n");
      }
    }
    String _name = prog.getName();
    String _plus = (_name + ".py");
    fsa.generateFile(_plus, ("#!/usr/bin/env python3\r\n\r\n# Import the necessary libraries\r\nimport time\r\nimport math\r\nfrom ev3dev2.motor import *\r\nfrom ev3dev2.sound import Sound\r\nfrom ev3dev2.button import Button\r\nfrom ev3dev2.sensor import *\r\nfrom ev3dev2.sensor.lego import *\r\nfrom ev3dev2.sensor.virtual import *\n\n" + fileContent));
  }
  
  public String statementToPython(final Statement v) {
    if ((v instanceof Variable)) {
      return this.varToPython(((Variable)v));
    }
    if ((v instanceof Expression)) {
      return this.expressionToPython(((Expression)v));
    }
    if ((v instanceof Loop)) {
      return this.loopToPython(((Loop)v));
    }
    if ((v instanceof ConditionEtat)) {
      String tmp = "if(";
      String _tmp = tmp;
      String _booleanExpressionToPython = this.booleanExpressionToPython(((ConditionEtat)v).getCondition());
      tmp = (_tmp + _booleanExpressionToPython);
      String _tmp_1 = tmp;
      tmp = (_tmp_1 + "):");
      int _nbTab = this.nbTab;
      this.nbTab = (_nbTab + 1);
      EList<Statement> _then = ((ConditionEtat)v).getThen();
      for (final Statement s : _then) {
        String _tmp_2 = tmp;
        String _donneTab = this.donneTab(this.nbTab);
        String _plus = ("\n" + _donneTab);
        String _statementToPython = this.statementToPython(s);
        String _plus_1 = (_plus + _statementToPython);
        tmp = (_tmp_2 + _plus_1);
      }
      int _nbTab_1 = this.nbTab;
      this.nbTab = (_nbTab_1 - 1);
      boolean _isEmpty = ((ConditionEtat)v).getElse().isEmpty();
      boolean _not = (!_isEmpty);
      if (_not) {
        String _tmp_3 = tmp;
        String _donneTab_1 = this.donneTab(this.nbTab);
        String _plus_2 = ("\n" + _donneTab_1);
        String _plus_3 = (_plus_2 + "else :");
        tmp = (_tmp_3 + _plus_3);
        int _nbTab_2 = this.nbTab;
        this.nbTab = (_nbTab_2 + 1);
        EList<Statement> _else = ((ConditionEtat)v).getElse();
        for (final Statement s_1 : _else) {
          String _tmp_4 = tmp;
          String _donneTab_2 = this.donneTab(this.nbTab);
          String _plus_4 = ("\n" + _donneTab_2);
          String _statementToPython_1 = this.statementToPython(s_1);
          String _plus_5 = (_plus_4 + _statementToPython_1);
          tmp = (_tmp_4 + _plus_5);
        }
        int _nbTab_3 = this.nbTab;
        this.nbTab = (_nbTab_3 - 1);
      }
      return tmp;
    }
    if ((v instanceof MethodePrint)) {
      String tmp_1 = "print(";
      EList<Expression> _expression = ((MethodePrint)v).getExpression();
      for (final Expression s_2 : _expression) {
        String _tmp_5 = tmp_1;
        String _expressionToPython = this.expressionToPython(s_2);
        String _plus_6 = (_expressionToPython + ",");
        tmp_1 = (_tmp_5 + _plus_6);
      }
      return (tmp_1 + ")");
    }
    if ((v instanceof Car)) {
      String tmp_2 = "";
      EList<Sensor> _sensor = ((Car)v).getSensor();
      for (final Sensor s_3 : _sensor) {
        String _tmp_6 = tmp_2;
        String _sensorToPython = this.sensorToPython(s_3);
        String _plus_7 = (_sensorToPython + "\n");
        tmp_2 = (_tmp_6 + _plus_7);
      }
      String tmp2 = "";
      EList<Engine> _engine = ((Car)v).getEngine();
      for (final Engine s_4 : _engine) {
        String _tmp2 = tmp2;
        String _engineToPython = this.engineToPython(s_4);
        String _plus_8 = (_engineToPython + "\n");
        tmp2 = (_tmp2 + _plus_8);
      }
      return (tmp_2 + tmp2);
    }
    return null;
  }
  
  public String engineToPython(final Engine v) {
    if ((v instanceof WheelEngine)) {
      String _position = ((WheelEngine)v).getPosition();
      String _plus = ("motor" + _position);
      String _plus_1 = (_plus + " = LargeMotor(OUTPUT_");
      String _position_1 = ((WheelEngine)v).getPosition();
      String _plus_2 = (_plus_1 + _position_1);
      return (_plus_2 + ")");
    }
    if ((v instanceof MotorizedArmEngine)) {
      String _position_2 = ((MotorizedArmEngine)v).getPosition();
      String _plus_3 = ("motor" + _position_2);
      String _plus_4 = (_plus_3 + " = LargeMotor(OUTPUT_");
      String _position_3 = ((MotorizedArmEngine)v).getPosition();
      String _plus_5 = (_plus_4 + _position_3);
      return (_plus_5 + ")");
    }
    if ((v instanceof PaintballLauncherEngine)) {
      String _position_4 = ((PaintballLauncherEngine)v).getPosition();
      String _plus_6 = ("motor" + _position_4);
      String _plus_7 = (_plus_6 + " = LargeMotor(OUTPUT_");
      String _position_5 = ((PaintballLauncherEngine)v).getPosition();
      String _plus_8 = (_plus_7 + _position_5);
      return (_plus_8 + ")");
    }
    return null;
  }
  
  public String sensorToPython(final Sensor v) {
    if ((v instanceof ColorSensor)) {
      int _position = ((ColorSensor)v).getPosition();
      String _plus = ("color_sensor_in" + Integer.valueOf(_position));
      String _plus_1 = (_plus + " = ColorSensor(INPUT_");
      int _position_1 = ((ColorSensor)v).getPosition();
      String _plus_2 = (_plus_1 + Integer.valueOf(_position_1));
      return (_plus_2 + ")");
    }
    if ((v instanceof LaserSensor)) {
      int _position_2 = ((LaserSensor)v).getPosition();
      String _plus_3 = ("laser_sensor_in" + Integer.valueOf(_position_2));
      String _plus_4 = (_plus_3 + " = LaserRangeSensor(INPUT_");
      int _position_3 = ((LaserSensor)v).getPosition();
      String _plus_5 = (_plus_4 + Integer.valueOf(_position_3));
      return (_plus_5 + ")");
    }
    if ((v instanceof GyroSensor)) {
      int _position_4 = ((GyroSensor)v).getPosition();
      String _plus_6 = ("gyro_sensor_in" + Integer.valueOf(_position_4));
      String _plus_7 = (_plus_6 + " = GyroSensor(INPUT_");
      int _position_5 = ((GyroSensor)v).getPosition();
      String _plus_8 = (_plus_7 + Integer.valueOf(_position_5));
      return (_plus_8 + ")");
    }
    if ((v instanceof GPSSensor)) {
      int _position_6 = ((GPSSensor)v).getPosition();
      String _plus_9 = ("GPS_sensor_in" + Integer.valueOf(_position_6));
      String _plus_10 = (_plus_9 + " = GPSSensor(INPUT_");
      int _position_7 = ((GPSSensor)v).getPosition();
      String _plus_11 = (_plus_10 + Integer.valueOf(_position_7));
      return (_plus_11 + ")");
    }
    if ((v instanceof UltraSonicSensor)) {
      int _position_8 = ((UltraSonicSensor)v).getPosition();
      String _plus_12 = ("ultrasonic_sensor_in" + Integer.valueOf(_position_8));
      String _plus_13 = (_plus_12 + " = UltrasonicSensor(INPUT_");
      int _position_9 = ((UltraSonicSensor)v).getPosition();
      String _plus_14 = (_plus_13 + Integer.valueOf(_position_9));
      return (_plus_14 + ")");
    }
    return null;
  }
  
  public String varToPython(final Variable v) {
    if ((v instanceof UnInteger)) {
      String _name = ((UnInteger)v).getName();
      String _plus = (_name + ":int=");
      int _initialeValue = ((UnInteger)v).getInitialeValue();
      return (_plus + Integer.valueOf(_initialeValue));
    }
    if ((v instanceof UnString)) {
      String _initialeValue_1 = ((UnString)v).getInitialeValue();
      boolean _tripleEquals = (_initialeValue_1 == null);
      if (_tripleEquals) {
        String _name_1 = ((UnString)v).getName();
        return (_name_1 + ":int= None");
      }
      String _name_2 = ((UnString)v).getName();
      String _plus_1 = (_name_2 + ":str=");
      String _plus_2 = (_plus_1 + "\"");
      String _initialeValue_2 = ((UnString)v).getInitialeValue();
      String _plus_3 = (_plus_2 + _initialeValue_2);
      return (_plus_3 + "\"");
    }
    if ((v instanceof UnBoolean)) {
      String _name_3 = ((UnBoolean)v).getName();
      String _plus_4 = (_name_3 + ":bool=");
      String _upperCase = Boolean.valueOf(((UnBoolean)v).isInitialeValue()).toString().substring(0, 1).toUpperCase();
      String _plus_5 = (_plus_4 + _upperCase);
      String _substring = Boolean.valueOf(((UnBoolean)v).isInitialeValue()).toString().substring(1);
      return (_plus_5 + _substring);
    }
    if ((v instanceof UnDouble)) {
      String _name_4 = ((UnDouble)v).getName();
      String _plus_6 = (_name_4 + ":double=");
      int _initialeValue1 = ((UnDouble)v).getInitialeValue1();
      String _plus_7 = (_plus_6 + Integer.valueOf(_initialeValue1));
      String _plus_8 = (_plus_7 + ".");
      int _initialeValue2 = ((UnDouble)v).getInitialeValue2();
      return (_plus_8 + Integer.valueOf(_initialeValue2));
    }
    if ((v instanceof UnColor)) {
      String _name_5 = ((UnColor)v).getName();
      String _plus_9 = (_name_5 + ":str=");
      String _colorToPython = this.colorToPython(((UnColor)v).getInitialValue());
      return (_plus_9 + _colorToPython);
    }
    return null;
  }
  
  public String expressionToPython(final Expression v) {
    if ((v instanceof VariableRef)) {
      return ((VariableRef)v).getVariable().getName();
    }
    if ((v instanceof TheInt)) {
      return Integer.valueOf(((TheInt)v).getValue()).toString();
    }
    if ((v instanceof TheColor)) {
      return this.colorToPython(((TheColor)v).getValue());
    }
    if ((v instanceof TheBoolean)) {
      String _upperCase = Boolean.valueOf(((TheBoolean)v).isValue()).toString().substring(0, 1).toUpperCase();
      String _substring = Boolean.valueOf(((TheBoolean)v).isValue()).toString().substring(1);
      return (_upperCase + _substring);
    }
    if ((v instanceof TheString)) {
      String _string = ((TheString)v).getValue().toString();
      String _plus = ("\"" + _string);
      return (_plus + "\"");
    }
    if ((v instanceof TheDouble)) {
      String _string_1 = Integer.valueOf(((TheDouble)v).getValue1()).toString();
      String _plus_1 = (_string_1 + ".");
      String _string_2 = Integer.valueOf(((TheDouble)v).getValue2()).toString();
      return (_plus_1 + _string_2);
    }
    if ((v instanceof BinaryOperation)) {
      return this.binaryOperationPython(((BinaryOperation)v));
    }
    if ((v instanceof EngineOperation)) {
      return this.engineOperationToPython(((EngineOperation)v));
    }
    if ((v instanceof SensorOperation)) {
      return this.sensorOperationToPython(((SensorOperation)v));
    }
    if ((v instanceof BooleanExpression)) {
      return this.booleanExpressionToPython(((BooleanExpression)v));
    }
    if ((v instanceof BreakMotor)) {
      String _position = ((BreakMotor)v).getEngine().getPosition();
      String _plus_2 = ("motor" + _position);
      return (_plus_2 + ".off(brake=True)");
    }
    return null;
  }
  
  public String colorToPython(final Colors c) {
    String _upperCase = c.toString().substring(0, 1).toUpperCase();
    String _plus = ("\"" + _upperCase);
    String _substring = c.toString().substring(1);
    String _plus_1 = (_plus + _substring);
    return (_plus_1 + "\"");
  }
  
  public String booleanExpressionToPython(final BooleanExpression v) {
    if ((v instanceof And)) {
      String tmp = this.expressionToPython(((And)v).getLeft());
      Expression _right = ((And)v).getRight();
      boolean _tripleNotEquals = (_right != null);
      if (_tripleNotEquals) {
        String _tmp = tmp;
        String _expressionToPython = this.expressionToPython(((And)v).getRight());
        String _plus = (" and " + _expressionToPython);
        tmp = (_tmp + _plus);
      }
      return tmp;
    }
    if ((v instanceof Or)) {
      String tmp_1 = this.expressionToPython(((Or)v).getLeft());
      Expression _right_1 = ((Or)v).getRight();
      boolean _tripleNotEquals_1 = (_right_1 != null);
      if (_tripleNotEquals_1) {
        String _tmp_1 = tmp_1;
        String _expressionToPython_1 = this.expressionToPython(((Or)v).getRight());
        String _plus_1 = (" or " + _expressionToPython_1);
        tmp_1 = (_tmp_1 + _plus_1);
      }
      return tmp_1;
    }
    return null;
  }
  
  public String sensorOperationToPython(final SensorOperation v) {
    if ((v instanceof ColorOperation)) {
      int _position = ((ColorOperation)v).getColorsensor().getPosition();
      String _plus = ("color_sensor_in" + Integer.valueOf(_position));
      return (_plus + ".color_name");
    }
    if ((v instanceof RangeOperation)) {
      int _position_1 = ((RangeOperation)v).getLasersensor().getPosition();
      String _plus_1 = ("laser_sensor_in" + Integer.valueOf(_position_1));
      return (_plus_1 + ".distance_centimeters");
    }
    if ((v instanceof IntensityOperation)) {
      int _position_2 = ((IntensityOperation)v).getColorsensor().getPosition();
      String _plus_2 = ("color_sensor_in" + Integer.valueOf(_position_2));
      return (_plus_2 + ".reflected_light_intensity");
    }
    if ((v instanceof XGPSOperation)) {
      int _position_3 = ((XGPSOperation)v).getGpssensor().getPosition();
      String _plus_3 = ("GPS_sensor_in" + Integer.valueOf(_position_3));
      return (_plus_3 + ".x");
    }
    if ((v instanceof YGPSOperation)) {
      int _position_4 = ((YGPSOperation)v).getGpssensor().getPosition();
      String _plus_4 = ("GPS_sensor_in" + Integer.valueOf(_position_4));
      return (_plus_4 + ".y");
    }
    if ((v instanceof DistanceOperation)) {
      int _position_5 = ((DistanceOperation)v).getUltrasonicsensor().getPosition();
      String _plus_5 = ("ultrasonic_sensor_in" + Integer.valueOf(_position_5));
      return (_plus_5 + ".distance_centimeters");
    }
    if ((v instanceof AngleOperation)) {
      int _position_6 = ((AngleOperation)v).getGyrosensor().getPosition();
      String _plus_6 = ("gyro_sensor_in" + Integer.valueOf(_position_6));
      return (_plus_6 + ".angle");
    }
    return null;
  }
  
  public String engineOperationToPython(final EngineOperation v) {
    if ((v instanceof VitesseOperation)) {
      String _position = ((VitesseOperation)v).getWheelengine().getPosition();
      String _plus = ("motor" + _position);
      String _plus_1 = (_plus + ".on(");
      String _expressionToPython = this.expressionToPython(((VitesseOperation)v).getRight());
      String _plus_2 = (_plus_1 + _expressionToPython);
      return (_plus_2 + ")");
    }
    if ((v instanceof PositionOperation)) {
      String _position_1 = ((PositionOperation)v).getMotorizedarmengine().getPosition();
      String _plus_3 = ("motor" + _position_1);
      String _plus_4 = (_plus_3 + ".on_to_position(20,(");
      String _expressionToPython_1 = this.expressionToPython(((PositionOperation)v).getRight());
      String _plus_5 = (_plus_4 + _expressionToPython_1);
      return (_plus_5 + "))");
    }
    if ((v instanceof ForceOperation)) {
      String _position_2 = ((ForceOperation)v).getPaintballlauncherengine().getPosition();
      String _plus_6 = ("motor" + _position_2);
      String _plus_7 = (_plus_6 + ".on_for_rotations(100,(-");
      String _expressionToPython_2 = this.expressionToPython(((ForceOperation)v).getRight());
      String _plus_8 = (_plus_7 + _expressionToPython_2);
      String _plus_9 = (_plus_8 + "))\n");
      String _plus_10 = (_plus_9 + "motor");
      String _position_3 = ((ForceOperation)v).getPaintballlauncherengine().getPosition();
      String _plus_11 = (_plus_10 + _position_3);
      String _plus_12 = (_plus_11 + ".on_for_rotations(100,(");
      String _expressionToPython_3 = this.expressionToPython(((ForceOperation)v).getRight());
      String _plus_13 = (_plus_12 + _expressionToPython_3);
      return (_plus_13 + "))");
    }
    return null;
  }
  
  public String binaryOperationPython(final BinaryOperation v) {
    if ((v instanceof Multiplication)) {
      String _expressionToPython = this.expressionToPython(((Multiplication)v).getLeft());
      String _plus = (_expressionToPython + " * ");
      String _expressionToPython_1 = this.expressionToPython(((Multiplication)v).getRight());
      return (_plus + _expressionToPython_1);
    }
    if ((v instanceof Addition)) {
      String _expressionToPython_2 = this.expressionToPython(((Addition)v).getLeft());
      String _plus_1 = (_expressionToPython_2 + " + ");
      String _expressionToPython_3 = this.expressionToPython(((Addition)v).getRight());
      return (_plus_1 + _expressionToPython_3);
    }
    if ((v instanceof Division)) {
      String _expressionToPython_4 = this.expressionToPython(((Division)v).getLeft());
      String _plus_2 = (_expressionToPython_4 + " / ");
      String _expressionToPython_5 = this.expressionToPython(((Division)v).getRight());
      return (_plus_2 + _expressionToPython_5);
    }
    if ((v instanceof Assignement)) {
      String _expressionToPython_6 = this.expressionToPython(((Assignement)v).getLeft());
      String _plus_3 = (_expressionToPython_6 + " = ");
      String _expressionToPython_7 = this.expressionToPython(((Assignement)v).getRight());
      return (_plus_3 + _expressionToPython_7);
    }
    if ((v instanceof MinusEqual)) {
      String _expressionToPython_8 = this.expressionToPython(((MinusEqual)v).getLeft());
      String _plus_4 = (_expressionToPython_8 + " -= ");
      String _expressionToPython_9 = this.expressionToPython(((MinusEqual)v).getRight());
      return (_plus_4 + _expressionToPython_9);
    }
    if ((v instanceof PlusEqual)) {
      String _expressionToPython_10 = this.expressionToPython(((PlusEqual)v).getLeft());
      String _plus_5 = (_expressionToPython_10 + " += ");
      String _expressionToPython_11 = this.expressionToPython(((PlusEqual)v).getRight());
      return (_plus_5 + _expressionToPython_11);
    }
    if ((v instanceof Substraction)) {
      String _expressionToPython_12 = this.expressionToPython(((Substraction)v).getLeft());
      String _plus_6 = (_expressionToPython_12 + " - ");
      String _expressionToPython_13 = this.expressionToPython(((Substraction)v).getRight());
      return (_plus_6 + _expressionToPython_13);
    }
    if ((v instanceof Comparaison)) {
      return this.comparaisonPython(((Comparaison)v));
    }
    return null;
  }
  
  public String comparaisonPython(final Comparaison v) {
    if ((v instanceof GT)) {
      String _expressionToPython = this.expressionToPython(((GT)v).getLeft());
      String _plus = (_expressionToPython + " > ");
      String _expressionToPython_1 = this.expressionToPython(((GT)v).getRight());
      return (_plus + _expressionToPython_1);
    }
    if ((v instanceof LT)) {
      String _expressionToPython_2 = this.expressionToPython(((LT)v).getLeft());
      String _plus_1 = (_expressionToPython_2 + " < ");
      String _expressionToPython_3 = this.expressionToPython(((LT)v).getRight());
      return (_plus_1 + _expressionToPython_3);
    }
    if ((v instanceof LTorEqual)) {
      String _expressionToPython_4 = this.expressionToPython(((LTorEqual)v).getLeft());
      String _plus_2 = (_expressionToPython_4 + " <= ");
      String _expressionToPython_5 = this.expressionToPython(((LTorEqual)v).getRight());
      return (_plus_2 + _expressionToPython_5);
    }
    if ((v instanceof GTorEqual)) {
      String _expressionToPython_6 = this.expressionToPython(((GTorEqual)v).getLeft());
      String _plus_3 = (_expressionToPython_6 + " >= ");
      String _expressionToPython_7 = this.expressionToPython(((GTorEqual)v).getRight());
      return (_plus_3 + _expressionToPython_7);
    }
    if ((v instanceof Equal)) {
      String _expressionToPython_8 = this.expressionToPython(((Equal)v).getLeft());
      String _plus_4 = (_expressionToPython_8 + " == ");
      String _expressionToPython_9 = this.expressionToPython(((Equal)v).getRight());
      return (_plus_4 + _expressionToPython_9);
    }
    if ((v instanceof Different)) {
      String _expressionToPython_10 = this.expressionToPython(((Different)v).getLeft());
      String _plus_5 = (_expressionToPython_10 + " != ");
      String _expressionToPython_11 = this.expressionToPython(((Different)v).getRight());
      return (_plus_5 + _expressionToPython_11);
    }
    return null;
  }
  
  public String loopToPython(final Loop v) {
    if ((v instanceof WhileLoop)) {
      String _booleanExpressionToPython = this.booleanExpressionToPython(((WhileLoop)v).getLoopCondition());
      String _plus = ("while(" + _booleanExpressionToPython);
      String tmp = (_plus + "): ");
      int _nbTab = this.nbTab;
      this.nbTab = (_nbTab + 1);
      EList<Statement> _statement = ((WhileLoop)v).getStatement();
      for (final Statement s : _statement) {
        String _tmp = tmp;
        String _donneTab = this.donneTab(this.nbTab);
        String _plus_1 = ("\n" + _donneTab);
        String _statementToPython = this.statementToPython(s);
        String _plus_2 = (_plus_1 + _statementToPython);
        tmp = (_tmp + _plus_2);
      }
      int _nbTab_1 = this.nbTab;
      this.nbTab = (_nbTab_1 - 1);
      return tmp;
    }
    return null;
  }
  
  public String donneTab(final int nbTab) {
    String tmp = "";
    for (int i = 0; (i < nbTab); i++) {
      String _tmp = tmp;
      tmp = (_tmp + "\t");
    }
    return tmp;
  }
}
